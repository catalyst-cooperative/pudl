"""Load pre-processed SEC 10-K assets from Google Cloud Storage.

These "raw" tables are generated by the SEC 10-K data extraction pipeline which can be
found in this repository: https://github.com/catalyst-cooperative/mozilla-sec-eia

However, the GCS bucket containing the data is not public, so these assets cannot be
loaded by a normal user. To address this issue we need to pull them into the same
Zenodo archiving system we use for all of our other inputs. See:
https://github.com/catalyst-cooperative/pudl/issues/4065
"""

from io import BytesIO

import dagster as dg
import pandas as pd

from pudl.settings import DataSource, Sec10kSettings
from pudl.workspace.datastore import Datastore


def extract(ds: Datastore, table: str, years: list[int]) -> pd.DataFrame:
    """Extract SEC 10-K data from the datastore.

    Args:
        ds: Initialized PUDL datastore.
        partition: Partition selection for the data extraction.

    Returns:
        A dataframe containing the SEC 10-K data.
    """
    resource = ds.get_unique_resource("sec10k", table_name=table)
    df = pd.read_parquet(BytesIO(resource))
    # if "year_quarter" in df.columns:
    #    # Filter the dataframe by the specified years
    #    df = df[df["year_quarter"].isin(years)]
    # elif "report_date" in df.columns:
    #    # Filter the dataframe by the specified years
    #    df = df[df["report_date"].dt.year.isin(years)]

    return df


def raw_sec10k_asset_factory(table) -> dg.AssetsDefinition:
    """Extract shit."""

    @dg.asset(
        group_name="raw_sec10k",
        name=table,
        required_resource_keys={"datastore", "dataset_settings"},
    )
    def sec10k_asset(context) -> pd.DataFrame:
        sec10k_settings: Sec10kSettings = context.resources.dataset_settings.sec10k
        ds: Datastore = context.resources.datastore
        if table in sec10k_settings.tables:
            return extract(ds=ds, table=table, years=sec10k_settings.years)
        raise ValueError(f"Unrecognized SEC 10-K table: {table}")  # pragma: no cover

    return sec10k_asset


raw_sec10k_assets = [
    raw_sec10k_asset_factory(table)
    for table in DataSource.from_id("sec10k").working_partitions["tables"]
]
