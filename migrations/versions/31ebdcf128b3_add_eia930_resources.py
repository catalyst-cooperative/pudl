"""Add eia930 resources

Revision ID: 31ebdcf128b3
Revises: e0d3904b97f4
Create Date: 2024-04-27 15:40:50.743530

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '31ebdcf128b3'
down_revision = 'e0d3904b97f4'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('core_eia930__hourly_balancing_authority_interchange',
    sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Timestamp at the end of the hour for which the data is reported.'),
    sa.Column('balancing_authority_code_eia', sa.Text(), nullable=False, comment='EIA short code identifying a balancing authority. May include Canadian and Mexican BAs.'),
    sa.Column('balancing_authority_code_adjacent_eia', sa.Text(), nullable=False, comment='EIA short code for the other adjacent balancing authority, with which interchange is occuring. Includes Canadian and Mexican BAs.'),
    sa.Column('interchange_reported_mwh', sa.Float(), nullable=True, comment='Original reported energy interchange between adjacent balancing authorities.'),
    sa.ForeignKeyConstraint(['balancing_authority_code_adjacent_eia'], ['core_eia__codes_balancing_authorities.code'], name=op.f('fk_core_eia930__hourly_balancing_authority_interchange_balancing_authority_code_adjacent_eia_core_eia__codes_balancing_authorities')),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia'], ['core_eia__codes_balancing_authorities.code'], name=op.f('fk_core_eia930__hourly_balancing_authority_interchange_balancing_authority_code_eia_core_eia__codes_balancing_authorities')),
    sa.PrimaryKeyConstraint('datetime_utc', 'balancing_authority_code_eia', 'balancing_authority_code_adjacent_eia', name=op.f('pk_core_eia930__hourly_balancing_authority_interchange'))
    )
    op.create_table('core_eia930__hourly_balancing_authority_net_generation_by_energy_source',
    sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Date and time converted to Coordinated Universal Time (UTC).'),
    sa.Column('balancing_authority_code_eia', sa.Text(), nullable=False, comment='EIA short code identifying a balancing authority. May include Canadian and Mexican BAs.'),
    sa.Column('generation_energy_source', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'unknown', 'wind'), nullable=False, comment='High level energy source used to produce electricity.'),
    sa.Column('net_generation_reported_mwh', sa.Float(), nullable=True, comment='Unaltered originally reported net generation for the specified period.'),
    sa.Column('net_generation_adjusted_mwh', sa.Float(), nullable=True, comment='Reported net generation adjusted by EIA to reflect non-physical commercial transfers through pseudo-ties and dynamic scheduling.'),
    sa.Column('net_generation_imputed_mwh', sa.Float(), nullable=True, comment='Reported net generation with outlying values removed and missing values imputed by EIA.'),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia'], ['core_eia__codes_balancing_authorities.code'], name=op.f('fk_core_eia930__hourly_balancing_authority_net_generation_by_energy_source_balancing_authority_code_eia_core_eia__codes_balancing_authorities')),
    sa.PrimaryKeyConstraint('datetime_utc', 'balancing_authority_code_eia', 'generation_energy_source', name=op.f('pk_core_eia930__hourly_balancing_authority_net_generation_by_energy_source'))
    )
    op.create_table('core_eia930__hourly_balancing_authority_operations',
    sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Date and time converted to Coordinated Universal Time (UTC).'),
    sa.Column('balancing_authority_code_eia', sa.Text(), nullable=False, comment='EIA short code identifying a balancing authority. May include Canadian and Mexican BAs.'),
    sa.Column('net_generation_reported_mwh', sa.Float(), nullable=True, comment='Unaltered originally reported net generation for the specified period.'),
    sa.Column('net_generation_adjusted_mwh', sa.Float(), nullable=True, comment='Reported net generation adjusted by EIA to reflect non-physical commercial transfers through pseudo-ties and dynamic scheduling.'),
    sa.Column('net_generation_imputed_mwh', sa.Float(), nullable=True, comment='Reported net generation with outlying values removed and missing values imputed by EIA.'),
    sa.Column('interchange_reported_mwh', sa.Float(), nullable=True, comment='Original reported energy interchange between adjacent balancing authorities.'),
    sa.Column('interchange_adjusted_mwh', sa.Float(), nullable=True, comment='Energy interchange between adjacent balancing authorities, adjusted by EIA to reflect non-physical commercial transfers through pseudo-ties and dynamic scheduling.'),
    sa.Column('interchange_imputed_mwh', sa.Float(), nullable=True, comment='Energy interchange between adjacent balancing authorities, with outliers and missing values imputed by EIA.'),
    sa.Column('demand_reported_mwh', sa.Float(), nullable=True, comment='Originally reported electricity demand, calculated by taking the net generation within the BA and subtracting the interchange with adjacent BAs.'),
    sa.Column('demand_adjusted_mwh', sa.Float(), nullable=True, comment='Electricity demand adjusted by EIA to reflect non-physical commercial transfers through pseudo-ties and dynamic scheduling.'),
    sa.Column('demand_imputed_mwh', sa.Float(), nullable=True, comment='Electricity demand calculated by subtracting BA interchange from net generation, with outliers and missing values imputed by EIA.'),
    sa.Column('demand_forecast_mwh', sa.Float(), nullable=True, comment='Day ahead demand forecast.'),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia'], ['core_eia__codes_balancing_authorities.code'], name=op.f('fk_core_eia930__hourly_balancing_authority_operations_balancing_authority_code_eia_core_eia__codes_balancing_authorities')),
    sa.PrimaryKeyConstraint('datetime_utc', 'balancing_authority_code_eia', name=op.f('pk_core_eia930__hourly_balancing_authority_operations'))
    )
    op.create_table('core_eia__codes_balancing_authority_subregions',
    sa.Column('balancing_authority_code_eia', sa.Text(), nullable=False, comment='EIA short code identifying a balancing authority. May include Canadian and Mexican BAs.'),
    sa.Column('balancing_authority_subregion_code_eia', sa.Enum('0001', '0004', '0006', '0027', '0035', '4001', '4002', '4003', '4004', '4005', '4006', '4007', '4008', '8910', 'ACMA', 'AE', 'AEP', 'AP', 'ATSI', 'BC', 'CE', 'COAS', 'CSWS', 'CYGA', 'DAY', 'DEOK', 'DOM', 'DPL', 'DUQ', 'EAST', 'EDE', 'EKPC', 'FREP', 'FWES', 'GRDA', 'INDN', 'JC', 'JICA', 'KACY', 'KAFB', 'KCEC', 'KCPL', 'LAC', 'LES', 'ME', 'MPS', 'NCEN', 'NPPD', 'NRTH', 'NTUA', 'OKGE', 'OPPD', 'PE', 'PEP', 'PGAE', 'PL', 'PN', 'PNM', 'PS', 'RECO', 'SCE', 'SCEN', 'SDGE', 'SECI', 'SOUT', 'SPRM', 'SPS', 'TSGT', 'VEA', 'WAUE', 'WEST', 'WFEC', 'WR', 'ZONA', 'ZONB', 'ZONC', 'ZOND', 'ZONE', 'ZONF', 'ZONG', 'ZONH', 'ZONI', 'ZONJ', 'ZONK'), nullable=False, comment='EIA subregion code.'),
    sa.Column('balancing_authority_subregion_name_eia', sa.Text(), nullable=True, comment='Name of the balancing authority subregion.'),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia'], ['core_eia__codes_balancing_authorities.code'], name=op.f('fk_core_eia__codes_balancing_authority_subregions_balancing_authority_code_eia_core_eia__codes_balancing_authorities')),
    sa.PrimaryKeyConstraint('balancing_authority_code_eia', 'balancing_authority_subregion_code_eia', name=op.f('pk_core_eia__codes_balancing_authority_subregions'))
    )
    op.create_table('core_eia930__hourly_balancing_authority_subregion_demand',
    sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Timestamp at the end of the hour for which the data is reported.'),
    sa.Column('balancing_authority_code_eia', sa.Text(), nullable=False, comment='EIA short code identifying a balancing authority. May include Canadian and Mexican BAs.'),
    sa.Column('balancing_authority_subregion_code_eia', sa.Enum('0001', '0004', '0006', '0027', '0035', '4001', '4002', '4003', '4004', '4005', '4006', '4007', '4008', '8910', 'ACMA', 'AE', 'AEP', 'AP', 'ATSI', 'BC', 'CE', 'COAS', 'CSWS', 'CYGA', 'DAY', 'DEOK', 'DOM', 'DPL', 'DUQ', 'EAST', 'EDE', 'EKPC', 'FREP', 'FWES', 'GRDA', 'INDN', 'JC', 'JICA', 'KACY', 'KAFB', 'KCEC', 'KCPL', 'LAC', 'LES', 'ME', 'MPS', 'NCEN', 'NPPD', 'NRTH', 'NTUA', 'OKGE', 'OPPD', 'PE', 'PEP', 'PGAE', 'PL', 'PN', 'PNM', 'PS', 'RECO', 'SCE', 'SCEN', 'SDGE', 'SECI', 'SOUT', 'SPRM', 'SPS', 'TSGT', 'VEA', 'WAUE', 'WEST', 'WFEC', 'WR', 'ZONA', 'ZONB', 'ZONC', 'ZOND', 'ZONE', 'ZONF', 'ZONG', 'ZONH', 'ZONI', 'ZONJ', 'ZONK'), nullable=False, comment='EIA subregion code.'),
    sa.Column('demand_reported_mwh', sa.Float(), nullable=True, comment='Originally reported electricity demand for the balancing area subregion. Method of calculation may vary by BA.'),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia', 'balancing_authority_subregion_code_eia'], ['core_eia__codes_balancing_authority_subregions.balancing_authority_code_eia', 'core_eia__codes_balancing_authority_subregions.balancing_authority_subregion_code_eia'], name=op.f('fk_core_eia930__hourly_balancing_authority_subregion_demand_balancing_authority_code_eia_core_eia__codes_balancing_authority_subregions')),
    sa.PrimaryKeyConstraint('datetime_utc', 'balancing_authority_code_eia', 'balancing_authority_subregion_code_eia', name=op.f('pk_core_eia930__hourly_balancing_authority_subregion_demand'))
    )
    op.drop_table('core_ferc__codes_accounts')
    with op.batch_alter_table('core_eia860__scd_generators_energy_storage', schema=None) as batch_op:
        batch_op.alter_column('storage_enclosure_code',
               existing_type=sa.VARCHAR(length=2),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.alter_column('storage_technology_code_1',
               existing_type=sa.VARCHAR(length=3),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.alter_column('storage_technology_code_2',
               existing_type=sa.VARCHAR(length=3),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.alter_column('storage_technology_code_3',
               existing_type=sa.VARCHAR(length=3),
               type_=sa.Text(),
               existing_nullable=True)
        batch_op.alter_column('storage_technology_code_4',
               existing_type=sa.VARCHAR(length=3),
               type_=sa.Text(),
               existing_nullable=True)

    with op.batch_alter_table('core_eia__codes_balancing_authorities', schema=None) as batch_op:
        batch_op.add_column(sa.Column('region_code_eia', sa.Enum('MIDA', 'TEX', 'SW', 'FLA', 'NY', 'CENT', 'MEX', 'NE', 'CAN', 'NW', 'SE', 'MIDW', 'CAR', 'CAL'), nullable=True, comment='EIA region code.'))
        batch_op.add_column(sa.Column('region_eia', sa.Text(), nullable=True, comment='Human-readable name of the EIA balancing region.'))
        batch_op.add_column(sa.Column('report_timezone', sa.Enum('America/Anchorage', 'America/Chicago', 'America/Denver', 'America/Los_Angeles', 'America/New_York', 'America/Phoenix', 'Pacific/Honolulu'), nullable=True, comment='Timezone used by the reporting entity. For use in localizing UTC times.'))
        batch_op.add_column(sa.Column('balancing_authority_retirement_date', sa.Date(), nullable=True, comment='Date on which the balancing authority ceased independent operation.'))
        batch_op.add_column(sa.Column('is_generation_only', sa.Boolean(), nullable=True, comment='Indicates whether the balancing authority is generation-only, meaning it does not serve retail customers and thus reports only net generation and interchange, but not demand.'))

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('core_eia__codes_balancing_authorities', schema=None) as batch_op:
        batch_op.drop_column('is_generation_only')
        batch_op.drop_column('balancing_authority_retirement_date')
        batch_op.drop_column('report_timezone')
        batch_op.drop_column('region_eia')
        batch_op.drop_column('region_code_eia')

    with op.batch_alter_table('core_eia860__scd_generators_energy_storage', schema=None) as batch_op:
        batch_op.alter_column('storage_technology_code_4',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=3),
               existing_nullable=True)
        batch_op.alter_column('storage_technology_code_3',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=3),
               existing_nullable=True)
        batch_op.alter_column('storage_technology_code_2',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=3),
               existing_nullable=True)
        batch_op.alter_column('storage_technology_code_1',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=3),
               existing_nullable=True)
        batch_op.alter_column('storage_enclosure_code',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=2),
               existing_nullable=True)

    op.create_table('core_ferc__codes_accounts',
    sa.Column('ferc_account_id', sa.TEXT(), nullable=False),
    sa.Column('ferc_account_description', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('ferc_account_id', name='pk_core_ferc__codes_accounts')
    )
    op.drop_table('core_eia930__hourly_balancing_authority_subregion_demand')
    op.drop_table('core_eia__codes_balancing_authority_subregions')
    op.drop_table('core_eia930__hourly_balancing_authority_operations')
    op.drop_table('core_eia930__hourly_balancing_authority_net_generation_by_energy_source')
    op.drop_table('core_eia930__hourly_balancing_authority_interchange')
    # ### end Alembic commands ###
