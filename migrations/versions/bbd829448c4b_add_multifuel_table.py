"""Add multifuel table

Revision ID: bbd829448c4b
Revises: 450d100cd30b
Create Date: 2025-01-17 14:36:41.966480

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'bbd829448c4b'
down_revision = '450d100cd30b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('core_eia860__scd_generators_multifuel',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=False, comment='The EIA Utility Identification number.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('county', sa.Text(), nullable=True, comment='County name.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('operational_status_code', sa.Text(), nullable=True, comment='The operating status of the asset.'),
    sa.Column('technology_description', sa.Text(), nullable=True, comment='High level description of the technology used by the generator to produce electricity.'),
    sa.Column('prime_mover_code', sa.Text(), nullable=True, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('sector_name_eia', sa.Text(), nullable=True, comment='EIA assigned sector name, corresponding to high level NAICS sector, designated by the primary purpose, regulatory status and plant-level combined heat and power status'),
    sa.Column('sector_id_eia', sa.Integer(), nullable=True, comment='EIA assigned sector ID, corresponding to high level NAICS sector, designated by the primary purpose, regulatory status and plant-level combined heat and power status'),
    sa.Column('capacity_mw', sa.Float(), nullable=True, comment='Total installed (nameplate) capacity, in megawatts.'),
    sa.Column('summer_capacity_mw', sa.Float(), nullable=True, comment='The net summer capacity.'),
    sa.Column('winter_capacity_mw', sa.Float(), nullable=True, comment='The net winter capacity.'),
    sa.Column('current_planned_generator_operating_date', sa.Date(), nullable=True, comment='The most recently updated effective date on which the generator is scheduled to start operation'),
    sa.Column('energy_source_code_1', sa.Text(), nullable=True, comment='The code representing the most predominant type of energy that fuels the generator.'),
    sa.Column('energy_source_code_2', sa.Text(), nullable=True, comment='The code representing the second most predominant type of energy that fuels the generator'),
    sa.Column('multiple_fuels', sa.Boolean(), nullable=True, comment='Can the generator burn multiple fuels?'),
    sa.Column('cofire_fuels', sa.Boolean(), nullable=True, comment='Can the generator co-fire fuels?'),
    sa.Column('cofire_energy_source_1', sa.Text(), nullable=True, comment='Type of fuel.'),
    sa.Column('cofire_energy_source_2', sa.Text(), nullable=True, comment='Type of fuel.'),
    sa.Column('cofire_energy_source_3', sa.Text(), nullable=True, comment='Type of fuel.'),
    sa.Column('cofire_energy_source_4', sa.Text(), nullable=True, comment='Type of fuel.'),
    sa.Column('cofire_energy_source_5', sa.Text(), nullable=True, comment='Type of fuel.'),
    sa.Column('cofire_energy_source_6', sa.Text(), nullable=True, comment='Type of fuel.'),
    sa.Column('switch_oil_gas', sa.Boolean(), nullable=True, comment='Indicates whether the generator switch between oil and natural gas.'),
    sa.Column('can_switch_when_operating', sa.Boolean(), nullable=True, comment='Indicates whether the generator switches fuel while operating.'),
    sa.Column('net_summer_capacity_with_natural_gas_mw', sa.Float(), nullable=True, comment='Summer capacity with natural gas.'),
    sa.Column('net_summer_capacity_with_oil_mw', sa.Float(), nullable=True, comment='Summer capacity with oil.'),
    sa.Column('net_winter_capacity_with_natural_gas_mw', sa.Float(), nullable=True, comment='Winter capacity with natural gas.'),
    sa.Column('net_winter_capacity_with_oil_mw', sa.Float(), nullable=True, comment='Winter capacity with oil'),
    sa.Column('has_factors_that_limit_switching', sa.Boolean(), nullable=True, comment='True if there are factors that limit switching.'),
    sa.Column('has_storage_limits', sa.Boolean(), nullable=True, comment='True if there are storage limits'),
    sa.Column('has_air_permit_limits', sa.Boolean(), nullable=True, comment='True if there are air permit limits'),
    sa.Column('has_other_limits', sa.Boolean(), nullable=True, comment='True if there are other limits on the generator.'),
    sa.Column('can_cofire_oil_and_gas', sa.Boolean(), nullable=True, comment='Can the generator co-fire oil and gas?'),
    sa.Column('can_cofire_100_oil', sa.Boolean(), nullable=True, comment='Can the generator co-fire 100 oil?'),
    sa.Column('max_oil_heat_input', sa.Float(), nullable=True, comment='TK'),
    sa.Column('max_oil_output_mw', sa.Float(), nullable=True, comment='MW'),
    sa.Column('can_fuel_switch', sa.Boolean(), nullable=True, comment='TK'),
    sa.Column('time_to_switch', sa.Text(), nullable=True, comment='Time needed to switch between fuel sources'),
    sa.Column('regulatory_limits', sa.Text(), nullable=True, comment='TK'),
    sa.Column('fuel_switch_energy_source_1', sa.Text(), nullable=True, comment='TK'),
    sa.Column('fuel_switch_energy_source_2', sa.Text(), nullable=True, comment='TK'),
    sa.Column('fuel_switch_energy_source_3', sa.Text(), nullable=True, comment='TK'),
    sa.Column('fuel_switch_energy_source_4', sa.Text(), nullable=True, comment='TK'),
    sa.Column('fuel_switch_energy_source_5', sa.Text(), nullable=True, comment='TK'),
    sa.Column('fuel_switch_energy_source_6', sa.Text(), nullable=True, comment='TK'),
    sa.ForeignKeyConstraint(['energy_source_code_1'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_core_eia860__scd_generators_multifuel_energy_source_code_1_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['energy_source_code_2'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_core_eia860__scd_generators_multifuel_energy_source_code_2_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['operational_status_code'], ['core_eia__codes_operational_status.code'], name=op.f('fk_core_eia860__scd_generators_multifuel_operational_status_code_core_eia__codes_operational_status')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name=op.f('fk_core_eia860__scd_generators_multifuel_plant_id_eia_core_eia860__scd_generators')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_core_eia860__scd_generators_multifuel_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['sector_id_eia'], ['core_eia__codes_sector_consolidated.code'], name=op.f('fk_core_eia860__scd_generators_multifuel_sector_id_eia_core_eia__codes_sector_consolidated')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_core_eia860__scd_generators_multifuel_utility_id_eia_core_eia860__scd_utilities')),
    sa.PrimaryKeyConstraint('report_date', 'utility_id_eia', 'generator_id', 'plant_id_eia', name=op.f('pk_core_eia860__scd_generators_multifuel'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('core_eia860__scd_generators_multifuel')
    # ### end Alembic commands ###
