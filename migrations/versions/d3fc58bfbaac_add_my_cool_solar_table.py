"""Add my cool solar table

Revision ID: d3fc58bfbaac
Revises: 825c04fb968d
Create Date: 2024-04-02 12:49:21.750295

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'd3fc58bfbaac'
down_revision = '825c04fb968d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('core_eia860__scd_generators_solar',
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('standard_testing_conditions_capacity_mwdc', sa.Float(), nullable=True, comment='The net capacity of this photovoltaic generator in direct current under standard test conditions (STC) of 1000 W/m^2 solar irradiance and 25 degrees Celsius PV module temperature. This was only reported in 2013 and 2014.'),
    sa.Column('net_metering_capacity_mwdc', sa.Float(), nullable=True, comment='The DC megawatt capacity that is part of a net metering agreement.'),
    sa.Column('uses_net_metering_agreement', sa.Boolean(), nullable=True, comment='Indicates if the output from this generator is part of a net metering agreement.'),
    sa.Column('uses_virtual_net_metering_agreement', sa.Boolean(), nullable=True, comment='Indicates if the output from this generator is part of a virtual net metering agreement.'),
    sa.Column('virtual_net_metering_capacity_mwdc', sa.Float(), nullable=True, comment='The DC capacity in MW that is part of a virtual net metering agreement.'),
    sa.Column('azimuth_angle_deg', sa.Float(), nullable=True, comment='Indicates the azimuth angle of the unit for fixed tilt or single-axis technologies.'),
    sa.Column('tilt_angle_deg', sa.Float(), nullable=True, comment='Indicates the tilt angle of the unit for fixed tilt or single-axis technologies.'),
    sa.Column('uses_technology_lenses_mirrors', sa.Boolean(), nullable=True, comment='Indicates whether lenses or mirrors are used at this solar generating unit.'),
    sa.Column('uses_technology_single_axis_tracking', sa.Boolean(), nullable=True, comment='Indicates whether single-axis tracking technologies are used at this solar generating unit.'),
    sa.Column('uses_technology_dual_axis_tracking', sa.Boolean(), nullable=True, comment='Indicates whether dual-axis tracking technologies are used at this solar generating unit.'),
    sa.Column('uses_technology_fixed_tilt', sa.Boolean(), nullable=True, comment='Indicates whether fixed tilt technologies are used at this solar generating unit.'),
    sa.Column('uses_technology_east_west_fixed_tilt', sa.Boolean(), nullable=True, comment='Indicates whether east west fixed tilt technologies are used at this solar generating unit.'),
    sa.Column('uses_technology_parabolic_trough', sa.Boolean(), nullable=True, comment='Indicates whether parabolic trough technologies s are used at this solar generating unit.'),
    sa.Column('uses_technology_linear_fresnel', sa.Boolean(), nullable=True, comment='Indicates whether linear fresnel technologies are used at this solar generating unit.'),
    sa.Column('uses_technology_power_tower', sa.Boolean(), nullable=True, comment='Indicates whether power towers are used at this solar generating unit.'),
    sa.Column('uses_technology_dish_engine', sa.Boolean(), nullable=True, comment='Indicates whether dish engines are used at this solar generating unit.'),
    sa.Column('uses_technology_other', sa.Boolean(), nullable=True, comment='Indicates whether other solar technologies are used at this solar generating unit.'),
    sa.Column('uses_material_crystalline_silicon', sa.Boolean(), nullable=True, comment='Indicates whether any solar photovoltaic panels at this generator are made of crystalline silicon.'),
    sa.Column('uses_material_thin_film_a_si', sa.Boolean(), nullable=True, comment='Indicates whether any solar photovoltaic panels at this generator are made of thin-film amorphous silicon (A-Si).'),
    sa.Column('uses_material_thin_film_cdte', sa.Boolean(), nullable=True, comment='Indicates whether any solar photovoltaic panels at this generator are made of thin-film cadmium telluride (CdTe).'),
    sa.Column('uses_material_thin_film_cigs', sa.Boolean(), nullable=True, comment='Indicates whether any solar photovoltaic panels at this generator are made of thin-film copper indium gallium diselenide (CIGS).'),
    sa.Column('uses_material_thin_film_other', sa.Boolean(), nullable=True, comment='Indicates whether any solar photovoltaic panels at this generator are made of other thin-film material.'),
    sa.Column('uses_material_other', sa.Boolean(), nullable=True, comment='Indicates whether any solar photovoltaic panels at this generator are made of other materials.'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name=op.f('fk_core_eia860__scd_generators_solar_plant_id_eia_core_eia860__scd_generators')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name=op.f('pk_core_eia860__scd_generators_solar'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ##
    op.drop_table('core_eia860__scd_generators_solar')
    # ### end Alembic commands ###
