"""Rename gridpathratoolkit tables and aggregation_key column

Revision ID: 890826d7cf58
Revises: 3e05a599c143
Create Date: 2024-04-02 11:01:09.427232

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '890826d7cf58'
down_revision = '3e05a599c143'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('out_gridpathratoolkit__hourly_available_capacity_factor',
    sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Date and time converted to Coordinated Universal Time (UTC).'),
    sa.Column('aggregation_group', sa.Text(), nullable=False, comment='A label identifying a group of aggregated generator capacity factors.'),
    sa.Column('capacity_factor', sa.Float(), nullable=True, comment='Fraction of potential generation that was actually reported for a plant part.'),
    sa.PrimaryKeyConstraint('datetime_utc', 'aggregation_group', name=op.f('pk_out_gridpathratoolkit__hourly_available_capacity_factor'))
    )
    op.create_table('core_gridpathratoolkit__assn_generator_aggregation_group',
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('aggregation_group', sa.Text(), nullable=True, comment='A label identifying a group of aggregated generator capacity factors.'),
    sa.Column('capacity_mw', sa.Float(), nullable=True, comment='Total installed (nameplate) capacity, in megawatts.'),
    sa.Column('include_generator', sa.Boolean(), nullable=True, comment='Indicates whether a generator is included in the generation profile aggregation.'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id'], ['core_eia__entity_generators.plant_id_eia', 'core_eia__entity_generators.generator_id'], name=op.f('fk_core_gridpathratoolkit__assn_generator_aggregation_group_plant_id_eia_core_eia__entity_generators')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', name=op.f('pk_core_gridpathratoolkit__assn_generator_aggregation_group'))
    )
    op.drop_table('core_gridpathratoolkit__capacity_factor_aggregations')
    op.drop_table('core_gridpathratoolkit__hourly_aggregated_extended_capacity_factors')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('core_gridpathratoolkit__hourly_aggregated_extended_capacity_factors',
    sa.Column('datetime_utc', sa.DATETIME(), nullable=False),
    sa.Column('aggregation_key', sa.TEXT(), nullable=False),
    sa.Column('capacity_factor', sa.FLOAT(), nullable=True),
    sa.PrimaryKeyConstraint('datetime_utc', 'aggregation_key', name='pk_core_gridpathratoolkit__hourly_aggregated_extended_capacity_factors')
    )
    op.create_table('core_gridpathratoolkit__capacity_factor_aggregations',
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('generator_id', sa.TEXT(), nullable=False),
    sa.Column('aggregation_key', sa.TEXT(), nullable=True),
    sa.Column('capacity_mw', sa.FLOAT(), nullable=True),
    sa.Column('include_generator', sa.BOOLEAN(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id'], ['core_eia__entity_generators.plant_id_eia', 'core_eia__entity_generators.generator_id'], name='fk_core_gridpathratoolkit__capacity_factor_aggregations_plant_id_eia_core_eia__entity_generators'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', name='pk_core_gridpathratoolkit__capacity_factor_aggregations')
    )
    op.drop_table('core_gridpathratoolkit__assn_generator_aggregation_group')
    op.drop_table('out_gridpathratoolkit__hourly_available_capacity_factor')
    # ### end Alembic commands ###
