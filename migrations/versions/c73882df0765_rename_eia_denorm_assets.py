"""Rename eia denorm assets

Revision ID: c73882df0765
Revises: 2ba971d7e675
Create Date: 2023-09-15 13:11:05.940269

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = 'c73882df0765'
down_revision = '2ba971d7e675'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('out_eia860__yearly_emissions_control_equipment',
    sa.Column('report_year', sa.Integer(), nullable=False, comment='Four-digit year in which the data was reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('emission_control_id_pudl', sa.Float(), nullable=False, comment='A PUDL-generated ID used to distinguish emission control units in the same report year and plant id. This ID should not be used to track units over time or between plants.'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.Column('emission_control_equipment_type_code', sa.Text(), nullable=True, comment='Short code indicating the type of emission control equipment installed.'),
    sa.Column('operational_status_code', sa.Text(), nullable=True, comment='The operating status of the asset.'),
    sa.Column('operational_status', sa.Text(), nullable=True, comment='The operating status of the asset. For generators this is based on which tab the generator was listed in in EIA 860.'),
    sa.Column('mercury_control_id_eia', sa.Text(), nullable=True, comment='Mercury control identification number. This ID is not a unique identifier.'),
    sa.Column('nox_control_id_eia', sa.Text(), nullable=True, comment='Nitrogen oxide control identification number. This ID is not a unique identifier.'),
    sa.Column('particulate_control_id_eia', sa.Text(), nullable=True, comment='Particulate matter control identification number. This ID is not a unique identifier.'),
    sa.Column('so2_control_id_eia', sa.Text(), nullable=True, comment='Sulfur dioxide control identification number. This ID is not a unique identifier.'),
    sa.Column('acid_gas_control', sa.Boolean(), nullable=True, comment='Indicates whether the emissions control equipment controls acid (HCl) gas.'),
    sa.Column('emission_control_equipment_cost', sa.Float(), nullable=True, comment='The total cost to install a piece of emission control equipment.'),
    sa.Column('emission_control_operating_date', sa.Date(), nullable=True, comment='The date a piece of emissions control equipment began operating. Derived from month and year columns in the raw data.'),
    sa.Column('emission_control_retirement_date', sa.Date(), nullable=True, comment='The expected or actual retirement date for a piece of emissions control equipment. Derived from month and year columns in the raw data.'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia860__yearly_emissions_control_equipment_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['emission_control_equipment_type_code'], ['core_eia__codes_emission_control_equipment_types.code'], name=op.f('fk_out_eia860__yearly_emissions_control_equipment_emission_control_equipment_type_code_core_eia__codes_emission_control_equipment_types')),
    sa.ForeignKeyConstraint(['operational_status_code'], ['core_eia__codes_operational_status.code'], name=op.f('fk_out_eia860__yearly_emissions_control_equipment_operational_status_code_core_eia__codes_operational_status')),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name=op.f('fk_out_eia860__yearly_emissions_control_equipment_plant_id_eia_core_eia__entity_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia860__yearly_emissions_control_equipment_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia860__yearly_emissions_control_equipment_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia860__yearly_emissions_control_equipment_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('report_year', 'plant_id_eia', 'emission_control_id_pudl', name=op.f('pk_out_eia860__yearly_emissions_control_equipment'))
    )
    op.create_table('out_eia923__fuel_receipts_costs',
    sa.Column('report_date', sa.Date(), nullable=True, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=True, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('contract_type_code', sa.Enum('S', 'C', 'NC', 'T'), nullable=True, comment='Purchase type under which receipts occurred in the reporting month. C: Contract, NC: New Contract, S: Spot Purchase, T: Tolling Agreement.'),
    sa.Column('contract_expiration_date', sa.Date(), nullable=True, comment='Date contract expires.Format:  MMYY.'),
    sa.Column('energy_source_code', sa.Text(), nullable=True, comment='A 2-3 letter code indicating the energy source (e.g. fuel type) associated with the record.'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_group_code', sa.Enum('petroleum', 'other_gas', 'petroleum_coke', 'natural_gas', 'coal'), nullable=True, comment='Fuel groups used in the Electric Power Monthly'),
    sa.Column('supplier_name', sa.Text(), nullable=True, comment='Company that sold the fuel to the plant or, in the case of Natural Gas, pipline owner.'),
    sa.Column('fuel_received_units', sa.Float(), nullable=True, comment='Quanity of fuel received in tons, barrel, or Mcf.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_cost_per_mmbtu', sa.Float(), nullable=True, comment='Average fuel cost per mmBTU of heat content in nominal USD.'),
    sa.Column('bulk_agg_fuel_cost_per_mmbtu', sa.Float(), nullable=True, comment='Fuel cost per mmbtu reported in the EIA bulk electricity data. This is an aggregate average fuel price for a whole state, region, month, sector, etc. Used to fill in missing fuel prices.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('total_fuel_cost', sa.Float(), nullable=True, comment='Total annual reported fuel costs for the plant part. Includes costs from all fuels.'),
    sa.Column('fuel_cost_from_eiaapi', sa.Boolean(), nullable=True, comment='Indicates whether the fuel cost was derived from the EIA API.'),
    sa.Column('sulfur_content_pct', sa.Float(), nullable=True, comment='Sulfur content percentage by weight to the nearest 0.01 percent.'),
    sa.Column('ash_content_pct', sa.Float(), nullable=True, comment='Ash content percentage by weight to the nearest 0.1 percent.'),
    sa.Column('mercury_content_ppm', sa.Float(), nullable=True, comment='Mercury content in parts per million (ppm) to the nearest 0.001 ppm.'),
    sa.Column('primary_transportation_mode_code', sa.Text(), nullable=True, comment='Transportation mode for the longest distance transported.'),
    sa.Column('secondary_transportation_mode_code', sa.Text(), nullable=True, comment='Transportation mode for the second longest distance transported.'),
    sa.Column('natural_gas_transport_code', sa.Enum('firm', 'interruptible'), nullable=True, comment='Contract type for natural gas transportation service.'),
    sa.Column('natural_gas_delivery_contract_type_code', sa.Enum('firm', 'interruptible'), nullable=True, comment='Contract type for natrual gas delivery service:'),
    sa.Column('moisture_content_pct', sa.Float(), nullable=True),
    sa.Column('chlorine_content_ppm', sa.Float(), nullable=True),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.Column('mine_id_msha', sa.Integer(), nullable=True, comment='MSHA issued mine identifier.'),
    sa.Column('mine_name', sa.Text(), nullable=True, comment='Coal mine name.'),
    sa.Column('mine_state', sa.Text(), nullable=True, comment='State where the coal mine is located. Two letter abbreviation.'),
    sa.Column('coalmine_county_id_fips', sa.Text(), nullable=True, comment='County ID from the Federal Information Processing Standard Publication 6-4. This is the county where the coal mine is located.'),
    sa.Column('mine_type_code', sa.Text(), nullable=True, comment='Type of coal mine.'),
    sa.ForeignKeyConstraint(['contract_type_code'], ['core_eia__codes_contract_types.code'], name=op.f('fk_out_eia923__fuel_receipts_costs_contract_type_code_core_eia__codes_contract_types')),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia923__fuel_receipts_costs_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia923__fuel_receipts_costs_energy_source_code_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['mine_type_code'], ['core_eia__codes_coalmine_types.code'], name=op.f('fk_out_eia923__fuel_receipts_costs_mine_type_code_core_eia__codes_coalmine_types')),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name=op.f('fk_out_eia923__fuel_receipts_costs_plant_id_eia_core_eia__entity_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__fuel_receipts_costs_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['primary_transportation_mode_code'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia923__fuel_receipts_costs_primary_transportation_mode_code_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['secondary_transportation_mode_code'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia923__fuel_receipts_costs_secondary_transportation_mode_code_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__fuel_receipts_costs_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__fuel_receipts_costs_utility_id_pudl_core_pudl__entity_utilities_pudl'))
    )
    op.create_table('out_eia923__generation_fuel_combined',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('energy_source_code', sa.Text(), nullable=False, comment='A 2-3 letter code indicating the energy source (e.g. fuel type) associated with the record.'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_type_code_aer', sa.Text(), nullable=True, comment='A partial aggregation of the reported fuel type codes into larger categories used by EIA in, for example, the Annual Energy Review (AER). Two or three letter alphanumeric.'),
    sa.Column('prime_mover_code', sa.Text(), nullable=False, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('fuel_consumed_units', sa.Float(), nullable=True, comment='Consumption of the fuel type in physical unit. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_consumed_for_electricity_units', sa.Float(), nullable=True, comment='Consumption for electric generation of the fuel type in physical unit.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_consumed_for_electricity_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel to produce electricity, in physical unit, year to date.'),
    sa.Column('net_generation_mwh', sa.Float(), nullable=True, comment='Net electricity generation for the specified period in megawatt-hours (MWh).'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia923__generation_fuel_combined_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia923__generation_fuel_combined_energy_source_code_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['fuel_type_code_aer'], ['core_eia__codes_fuel_types_aer.code'], name=op.f('fk_out_eia923__generation_fuel_combined_fuel_type_code_aer_core_eia__codes_fuel_types_aer')),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name=op.f('fk_out_eia923__generation_fuel_combined_plant_id_eia_core_eia__entity_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__generation_fuel_combined_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia923__generation_fuel_combined_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__generation_fuel_combined_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__generation_fuel_combined_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', 'prime_mover_code', 'energy_source_code', name=op.f('pk_out_eia923__generation_fuel_combined'))
    )
    op.create_table('out_eia923__monthly_fuel_receipts_costs',
    sa.Column('report_date', sa.Date(), nullable=True, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=True, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_received_units', sa.Float(), nullable=True, comment='Quanity of fuel received in tons, barrel, or Mcf.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_cost_per_mmbtu', sa.Float(), nullable=True, comment='Average fuel cost per mmBTU of heat content in nominal USD.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('total_fuel_cost', sa.Float(), nullable=True, comment='Total annual reported fuel costs for the plant part. Includes costs from all fuels.'),
    sa.Column('fuel_cost_from_eiaapi', sa.Boolean(), nullable=True, comment='Indicates whether the fuel cost was derived from the EIA API.'),
    sa.Column('sulfur_content_pct', sa.Float(), nullable=True, comment='Sulfur content percentage by weight to the nearest 0.01 percent.'),
    sa.Column('ash_content_pct', sa.Float(), nullable=True, comment='Ash content percentage by weight to the nearest 0.1 percent.'),
    sa.Column('mercury_content_ppm', sa.Float(), nullable=True, comment='Mercury content in parts per million (ppm) to the nearest 0.001 ppm.'),
    sa.Column('moisture_content_pct', sa.Float(), nullable=True),
    sa.Column('chlorine_content_ppm', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name=op.f('fk_out_eia923__monthly_fuel_receipts_costs_plant_id_eia_core_eia__entity_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__monthly_fuel_receipts_costs_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__monthly_fuel_receipts_costs_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__monthly_fuel_receipts_costs_utility_id_pudl_core_pudl__entity_utilities_pudl'))
    )
    op.create_table('out_eia923__monthly_generation_fuel_combined',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('energy_source_code', sa.Text(), nullable=False, comment='A 2-3 letter code indicating the energy source (e.g. fuel type) associated with the record.'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('prime_mover_code', sa.Text(), nullable=False, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('fuel_consumed_units', sa.Float(), nullable=True, comment='Consumption of the fuel type in physical unit. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_consumed_for_electricity_units', sa.Float(), nullable=True, comment='Consumption for electric generation of the fuel type in physical unit.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_consumed_for_electricity_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel to produce electricity, in physical unit, year to date.'),
    sa.Column('net_generation_mwh', sa.Float(), nullable=True, comment='Net electricity generation for the specified period in megawatt-hours (MWh).'),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia923__monthly_generation_fuel_combined_energy_source_code_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name=op.f('fk_out_eia923__monthly_generation_fuel_combined_plant_id_eia_core_eia__entity_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__monthly_generation_fuel_combined_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia923__monthly_generation_fuel_combined_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__monthly_generation_fuel_combined_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__monthly_generation_fuel_combined_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', 'prime_mover_code', 'energy_source_code', name=op.f('pk_out_eia923__monthly_generation_fuel_combined'))
    )
    op.create_table('out_eia923__boiler_fuel',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('boiler_id', sa.Text(), nullable=False, comment='Alphanumeric boiler ID.'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('energy_source_code', sa.Text(), nullable=False, comment='A 2-3 letter code indicating the energy source (e.g. fuel type) associated with the record.'),
    sa.Column('prime_mover_code', sa.Text(), nullable=False, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_consumed_units', sa.Float(), nullable=True, comment='Consumption of the fuel type in physical unit. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('sulfur_content_pct', sa.Float(), nullable=True, comment='Sulfur content percentage by weight to the nearest 0.01 percent.'),
    sa.Column('ash_content_pct', sa.Float(), nullable=True, comment='Ash content percentage by weight to the nearest 0.1 percent.'),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia923__boiler_fuel_energy_source_code_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id'], ['core_eia__entity_boilers.plant_id_eia', 'core_eia__entity_boilers.boiler_id'], name=op.f('fk_out_eia923__boiler_fuel_plant_id_eia_core_eia__entity_boilers')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__boiler_fuel_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia923__boiler_fuel_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__boiler_fuel_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__boiler_fuel_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'energy_source_code', 'prime_mover_code', 'report_date', name=op.f('pk_out_eia923__boiler_fuel'))
    )
    op.create_table('out_eia923__generation',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('net_generation_mwh', sa.Float(), nullable=True, comment='Net electricity generation for the specified period in megawatt-hours (MWh).'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia923__generation_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id'], ['core_eia__entity_generators.plant_id_eia', 'core_eia__entity_generators.generator_id'], name=op.f('fk_out_eia923__generation_plant_id_eia_core_eia__entity_generators')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__generation_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__generation_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__generation_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name=op.f('pk_out_eia923__generation'))
    )
    op.create_table('out_eia923__monthly_boiler_fuel',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('boiler_id', sa.Text(), nullable=False, comment='Alphanumeric boiler ID.'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('energy_source_code', sa.Text(), nullable=False, comment='A 2-3 letter code indicating the energy source (e.g. fuel type) associated with the record.'),
    sa.Column('prime_mover_code', sa.Text(), nullable=False, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_consumed_units', sa.Float(), nullable=True, comment='Consumption of the fuel type in physical unit. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('sulfur_content_pct', sa.Float(), nullable=True, comment='Sulfur content percentage by weight to the nearest 0.01 percent.'),
    sa.Column('ash_content_pct', sa.Float(), nullable=True, comment='Ash content percentage by weight to the nearest 0.1 percent.'),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia923__monthly_boiler_fuel_energy_source_code_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id'], ['core_eia__entity_boilers.plant_id_eia', 'core_eia__entity_boilers.boiler_id'], name=op.f('fk_out_eia923__monthly_boiler_fuel_plant_id_eia_core_eia__entity_boilers')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__monthly_boiler_fuel_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia923__monthly_boiler_fuel_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__monthly_boiler_fuel_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__monthly_boiler_fuel_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'energy_source_code', 'prime_mover_code', 'report_date', name=op.f('pk_out_eia923__monthly_boiler_fuel'))
    )
    op.create_table('out_eia923__monthly_generation',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('net_generation_mwh', sa.Float(), nullable=True, comment='Net electricity generation for the specified period in megawatt-hours (MWh).'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id'], ['core_eia__entity_generators.plant_id_eia', 'core_eia__entity_generators.generator_id'], name=op.f('fk_out_eia923__monthly_generation_plant_id_eia_core_eia__entity_generators')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__monthly_generation_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_out_eia923__monthly_generation_utility_id_eia_core_eia__entity_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__monthly_generation_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name=op.f('pk_out_eia923__monthly_generation'))
    )
    op.create_table('out_eia__yearly_utilities',
    sa.Column('utility_id_eia', sa.Integer(), nullable=False, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('street_address', sa.Text(), nullable=True),
    sa.Column('city', sa.Text(), nullable=True),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('zip_code', sa.Text(), nullable=True, comment='Five digit US Zip Code.'),
    sa.Column('plants_reported_owner', sa.Boolean(), nullable=True, comment='Is the reporting entity an owner of power plants reported on Schedule 2 of the form?'),
    sa.Column('plants_reported_operator', sa.Boolean(), nullable=True, comment='Is the reporting entity an operator of power plants reported on Schedule 2 of the form?'),
    sa.Column('plants_reported_asset_manager', sa.Boolean(), nullable=True, comment='Is the reporting entity an asset manager of power plants reported on Schedule 2 of the form?'),
    sa.Column('plants_reported_other_relationship', sa.Boolean(), nullable=True, comment='Does the reporting entity have any other relationship to the power plants reported on Schedule 2 of the form?'),
    sa.Column('entity_type', sa.Text(), nullable=True, comment='Entity type of principal owner.'),
    sa.Column('attention_line', sa.Text(), nullable=True),
    sa.Column('address_2', sa.Text(), nullable=True),
    sa.Column('zip_code_4', sa.Text(), nullable=True, comment='Four digit US Zip Code suffix.'),
    sa.Column('contact_firstname', sa.Text(), nullable=True, comment='First name of utility contact 1.'),
    sa.Column('contact_lastname', sa.Text(), nullable=True, comment='Last name of utility contact 1.'),
    sa.Column('contact_title', sa.Text(), nullable=True, comment='Title of of utility contact 1.'),
    sa.Column('phone_number', sa.Text(), nullable=True, comment='Phone number for utility contact 1.'),
    sa.Column('phone_extension', sa.Text(), nullable=True, comment='Phone extension for utility contact 1'),
    sa.Column('contact_firstname_2', sa.Text(), nullable=True, comment='First name of utility contact 2.'),
    sa.Column('contact_lastname_2', sa.Text(), nullable=True, comment='Last name of utility contact 2.'),
    sa.Column('contact_title_2', sa.Text(), nullable=True, comment='Title of utility contact 2.'),
    sa.Column('phone_number_2', sa.Text(), nullable=True, comment='Phone number for utility contact 2.'),
    sa.Column('phone_extension_2', sa.Text(), nullable=True, comment='Phone extension for utility contact 2'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia__yearly_utilities_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia__yearly_utilities_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia__yearly_utilities_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('utility_id_eia', 'report_date', name=op.f('pk_out_eia__yearly_utilities'))
    )
    op.create_table('_out_eia__plants_utilities',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=False, comment='The EIA Utility Identification number.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name=op.f('fk__out_eia__plants_utilities_plant_id_eia_core_eia860__scd_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk__out_eia__plants_utilities_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk__out_eia__plants_utilities_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk__out_eia__plants_utilities_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('report_date', 'plant_id_eia', 'utility_id_eia', name=op.f('pk__out_eia__plants_utilities'))
    )
    op.create_table('out_eia923__yearly_fuel_receipts_costs',
    sa.Column('report_date', sa.Date(), nullable=True, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=True, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_received_units', sa.Float(), nullable=True, comment='Quanity of fuel received in tons, barrel, or Mcf.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_cost_per_mmbtu', sa.Float(), nullable=True, comment='Average fuel cost per mmBTU of heat content in nominal USD.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('total_fuel_cost', sa.Float(), nullable=True, comment='Total annual reported fuel costs for the plant part. Includes costs from all fuels.'),
    sa.Column('fuel_cost_from_eiaapi', sa.Boolean(), nullable=True, comment='Indicates whether the fuel cost was derived from the EIA API.'),
    sa.Column('sulfur_content_pct', sa.Float(), nullable=True, comment='Sulfur content percentage by weight to the nearest 0.01 percent.'),
    sa.Column('ash_content_pct', sa.Float(), nullable=True, comment='Ash content percentage by weight to the nearest 0.1 percent.'),
    sa.Column('mercury_content_ppm', sa.Float(), nullable=True, comment='Mercury content in parts per million (ppm) to the nearest 0.001 ppm.'),
    sa.Column('moisture_content_pct', sa.Float(), nullable=True),
    sa.Column('chlorine_content_ppm', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name=op.f('fk_out_eia923__yearly_fuel_receipts_costs_plant_id_eia_core_eia860__scd_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__yearly_fuel_receipts_costs_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia923__yearly_fuel_receipts_costs_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__yearly_fuel_receipts_costs_utility_id_pudl_core_pudl__entity_utilities_pudl'))
    )
    op.create_table('out_eia923__yearly_generation_fuel_combined',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('energy_source_code', sa.Text(), nullable=False, comment='A 2-3 letter code indicating the energy source (e.g. fuel type) associated with the record.'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('prime_mover_code', sa.Text(), nullable=False, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('fuel_consumed_units', sa.Float(), nullable=True, comment='Consumption of the fuel type in physical unit. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_consumed_for_electricity_units', sa.Float(), nullable=True, comment='Consumption for electric generation of the fuel type in physical unit.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_consumed_for_electricity_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel to produce electricity, in physical unit, year to date.'),
    sa.Column('net_generation_mwh', sa.Float(), nullable=True, comment='Net electricity generation for the specified period in megawatt-hours (MWh).'),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia923__yearly_generation_fuel_combined_energy_source_code_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name=op.f('fk_out_eia923__yearly_generation_fuel_combined_plant_id_eia_core_eia860__scd_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__yearly_generation_fuel_combined_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia923__yearly_generation_fuel_combined_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia923__yearly_generation_fuel_combined_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__yearly_generation_fuel_combined_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', 'prime_mover_code', 'energy_source_code', name=op.f('pk_out_eia923__yearly_generation_fuel_combined'))
    )
    op.create_table('out_eia__yearly_plants',
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('city', sa.Text(), nullable=True),
    sa.Column('county', sa.Text(), nullable=True, comment='County name.'),
    sa.Column('latitude', sa.Float(), nullable=True, comment="Latitude of the plant's location, in degrees."),
    sa.Column('longitude', sa.Float(), nullable=True, comment="Longitude of the plant's location, in degrees."),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('street_address', sa.Text(), nullable=True),
    sa.Column('zip_code', sa.Text(), nullable=True, comment='Five digit US Zip Code.'),
    sa.Column('timezone', sa.Enum('Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Timbuktu', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/ComodRivadavia', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Atka', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Buenos_Aires', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Catamarca', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Ciudad_Juarez', 'America/Coral_Harbour', 'America/Cordoba', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Nelson', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indianapolis', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Jujuy', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Knox_IN', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Louisville', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Mendoza', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Nuuk', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Punta_Arenas', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Rosario', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Shiprock', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Virgin', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/South_Pole', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Ashkhabad', 'Asia/Atyrau', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Chungking', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Harbin', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Katmandu', 'Asia/Khandyga', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macao', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qostanay', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Saigon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tel_Aviv', 'Asia/Thimbu', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Tomsk', 'Asia/Ujung_Pandang', 'Asia/Ulaanbaatar', 'Asia/Ulan_Bator', 'Asia/Urumqi', 'Asia/Ust-Nera', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yangon', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Faroe', 'Atlantic/Jan_Mayen', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Canberra', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/NSW', 'Australia/North', 'Australia/Perth', 'Australia/Queensland', 'Australia/South', 'Australia/Sydney', 'Australia/Tasmania', 'Australia/Victoria', 'Australia/West', 'Australia/Yancowinna', 'Brazil/Acre', 'Brazil/DeNoronha', 'Brazil/East', 'Brazil/West', 'CET', 'CST6CDT', 'Canada/Atlantic', 'Canada/Central', 'Canada/Eastern', 'Canada/Mountain', 'Canada/Newfoundland', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Cuba', 'EET', 'EST', 'EST5EDT', 'Egypt', 'Eire', 'Etc/GMT', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-0', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/GMT0', 'Etc/Greenwich', 'Etc/UCT', 'Etc/UTC', 'Etc/Universal', 'Etc/Zulu', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Kirov', 'Europe/Kyiv', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'GB', 'GB-Eire', 'GMT', 'GMT+0', 'GMT-0', 'GMT0', 'Greenwich', 'HST', 'Hongkong', 'Iceland', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Iran', 'Israel', 'Jamaica', 'Japan', 'Kwajalein', 'Libya', 'MET', 'MST', 'MST7MDT', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'NZ', 'NZ-CHAT', 'Navajo', 'PRC', 'PST8PDT', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Bougainville', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kanton', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'Poland', 'Portugal', 'ROC', 'ROK', 'Singapore', 'Turkey', 'UCT', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Samoa', 'UTC', 'Universal', 'W-SU', 'WET', 'Zulu'), nullable=True, comment='IANA timezone name'),
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('ash_impoundment', sa.Boolean(), nullable=True, comment='Is there an ash impoundment (e.g. pond, reservoir) at the plant?'),
    sa.Column('ash_impoundment_lined', sa.Boolean(), nullable=True, comment='If there is an ash impoundment at the plant, is the impoundment lined?'),
    sa.Column('ash_impoundment_status', sa.Text(), nullable=True, comment='If there is an ash impoundment at the plant, the ash impoundment status as of December 31 of the reporting year.'),
    sa.Column('balancing_authority_code_eia', sa.Text(), nullable=True, comment='EIA short code identifying a balancing authority.'),
    sa.Column('balancing_authority_name_eia', sa.Text(), nullable=True, comment='Name of the balancing authority.'),
    sa.Column('datum', sa.Text(), nullable=True, comment='Geodetic coordinate system identifier (e.g. NAD27, NAD83, or WGS84).'),
    sa.Column('energy_storage', sa.Boolean(), nullable=True, comment='Indicates if the facility has energy storage capabilities.'),
    sa.Column('ferc_cogen_docket_no', sa.Text(), nullable=True, comment='The docket number relating to the FERC cogenerator status. See FERC Form 556.'),
    sa.Column('ferc_cogen_status', sa.Boolean(), nullable=True, comment='Indicates whether the plant has FERC qualifying facility cogenerator status. See FERC Form 556.'),
    sa.Column('ferc_exempt_wholesale_generator_docket_no', sa.Text(), nullable=True, comment='The docket number relating to the FERC qualifying facility exempt wholesale generator status.'),
    sa.Column('ferc_exempt_wholesale_generator', sa.Boolean(), nullable=True, comment='Indicates whether the plant has FERC qualifying facility exempt wholesale generator status'),
    sa.Column('ferc_small_power_producer_docket_no', sa.Text(), nullable=True, comment='The docket number relating to the FERC qualifying facility small power producer status. See FERC Form 556.'),
    sa.Column('ferc_small_power_producer', sa.Boolean(), nullable=True, comment='Indicates whether the plant has FERC qualifying facility small power producer status. See FERC Form 556.'),
    sa.Column('ferc_qualifying_facility_docket_no', sa.Text(), nullable=True, comment='The docket number relating to the FERC qualifying facility cogenerator status. See FERC Form 556.'),
    sa.Column('grid_voltage_1_kv', sa.Float(), nullable=True, comment="Plant's grid voltage at point of interconnection to transmission or distibution facilities"),
    sa.Column('grid_voltage_2_kv', sa.Float(), nullable=True, comment="Plant's grid voltage at point of interconnection to transmission or distibution facilities"),
    sa.Column('grid_voltage_3_kv', sa.Float(), nullable=True, comment="Plant's grid voltage at point of interconnection to transmission or distibution facilities"),
    sa.Column('iso_rto_code', sa.Text(), nullable=True, comment="The code of the plant's ISO or RTO. NA if not reported in that year."),
    sa.Column('liquefied_natural_gas_storage', sa.Boolean(), nullable=True, comment='Indicates if the facility have the capability to store the natural gas in the form of liquefied natural gas.'),
    sa.Column('natural_gas_local_distribution_company', sa.Text(), nullable=True, comment='Names of Local Distribution Company (LDC), connected to natural gas burning power plants.'),
    sa.Column('natural_gas_storage', sa.Boolean(), nullable=True, comment='Indicates if the facility have on-site storage of natural gas.'),
    sa.Column('natural_gas_pipeline_name_1', sa.Text(), nullable=True, comment='The name of the owner or operator of natural gas pipeline that connects directly to this facility or that connects to a lateral pipeline owned by this facility.'),
    sa.Column('natural_gas_pipeline_name_2', sa.Text(), nullable=True, comment='The name of the owner or operator of natural gas pipeline that connects directly to this facility or that connects to a lateral pipeline owned by this facility.'),
    sa.Column('natural_gas_pipeline_name_3', sa.Text(), nullable=True, comment='The name of the owner or operator of natural gas pipeline that connects directly to this facility or that connects to a lateral pipeline owned by this facility.'),
    sa.Column('nerc_region', sa.Enum('BASN', 'CALN', 'CALS', 'DSW', 'ASCC', 'ISONE', 'ERCOT', 'NORW', 'NYISO', 'PJM', 'ROCK', 'ECAR', 'FRCC', 'HICC', 'MAAC', 'MAIN', 'MAPP', 'MRO', 'NPCC', 'RFC', 'SERC', 'SPP', 'TRE', 'WECC', 'WSCC', 'MISO', 'ECAR_MAAC', 'MAPP_WECC', 'RFC_SERC', 'SPP_WECC', 'MRO_WECC', 'ERCOT_SPP', 'SPP_TRE', 'ERCOT_TRE', 'MISO_TRE', 'VI', 'GU', 'PR', 'AS', 'UNK'), nullable=True, comment='NERC region in which the plant is located'),
    sa.Column('net_metering', sa.Boolean(), nullable=True, comment='Did this plant have a net metering agreement in effect during the reporting year?  (Only displayed for facilities that report the sun or wind as an energy source). This field was only reported up until 2015'),
    sa.Column('pipeline_notes', sa.Text(), nullable=True, comment='Additional owner or operator of natural gas pipeline.'),
    sa.Column('primary_purpose_id_naics', sa.Integer(), nullable=True, comment='North American Industry Classification System (NAICS) code that best describes the primary purpose of the reporting plant'),
    sa.Column('regulatory_status_code', sa.Text(), nullable=True, comment='Indicates whether the plant is regulated or non-regulated.'),
    sa.Column('reporting_frequency_code', sa.Enum('A', 'AM', 'M'), nullable=True, comment='Code that specifies what time period data has to be reported (i.e. monthly data or annual totals) and how often the power plant reports this data to EIA. See reporting_frequencies_eia for more details.'),
    sa.Column('sector_id_eia', sa.Integer(), nullable=True, comment='EIA assigned sector ID, corresponding to high level NAICS sector, designated by the primary purpose, regulatory status and plant-level combined heat and power status'),
    sa.Column('sector_name_eia', sa.Text(), nullable=True, comment='EIA assigned sector name, corresponding to high level NAICS sector, designated by the primary purpose, regulatory status and plant-level combined heat and power status'),
    sa.Column('service_area', sa.Text(), nullable=True, comment="Service area in which plant is located; for unregulated companies, it's the electric utility with which plant is interconnected"),
    sa.Column('transmission_distribution_owner_id', sa.Integer(), nullable=True, comment='EIA-assigned code for owner of transmission/distribution system to which the plant is interconnected.'),
    sa.Column('transmission_distribution_owner_name', sa.Text(), nullable=True, comment='Name of the owner of the transmission or distribution system to which the plant is interconnected.'),
    sa.Column('transmission_distribution_owner_state', sa.Text(), nullable=True, comment='State location for owner of transmission/distribution system to which the plant is interconnected.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('water_source', sa.Text(), nullable=True, comment='Name of water source associated with the plant.'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('balancing_authority_code_eia_consistent_rate', sa.Float(), nullable=True, comment='Percentage consistency of balancing authority code across entity records.'),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia'], ['core_eia__codes_balancing_authorities.code'], name=op.f('fk_out_eia__yearly_plants_balancing_authority_code_eia_core_eia__codes_balancing_authorities')),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia__yearly_plants_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name=op.f('fk_out_eia__yearly_plants_plant_id_eia_core_eia860__scd_plants')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia__yearly_plants_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['reporting_frequency_code'], ['core_eia__codes_reporting_frequencies.code'], name=op.f('fk_out_eia__yearly_plants_reporting_frequency_code_core_eia__codes_reporting_frequencies')),
    sa.ForeignKeyConstraint(['sector_id_eia'], ['core_eia__codes_sector_consolidated.code'], name=op.f('fk_out_eia__yearly_plants_sector_id_eia_core_eia__codes_sector_consolidated')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia__yearly_plants_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia__yearly_plants_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', name=op.f('pk_out_eia__yearly_plants'))
    )
    op.create_table('out_eia860__yearly_ownership',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('owner_utility_id_eia', sa.Integer(), nullable=False, comment="EIA-assigned owner's identification number."),
    sa.Column('owner_name', sa.Text(), nullable=True, comment='Name of owner.'),
    sa.Column('owner_state', sa.Enum('DC', 'OH', 'OK', 'KS', 'NB', 'PR', 'VA', 'SD', 'GA', 'WV', 'ND', 'GU', 'IL', 'TN', 'NT', 'CT', 'VI', 'ID', 'QC', 'NU', 'AK', 'MI', 'MT', 'NH', 'ON', 'AZ', 'MS', 'OR', 'AS', 'CO', 'ME', 'NC', 'MD', 'NY', 'AB', 'YT', 'KY', 'SK', 'DE', 'NV', 'NM', 'AL', 'NS', 'WY', 'WA', 'WI', 'NJ', 'SC', 'LA', 'MO', 'CA', 'BC', 'HI', 'MP', 'NE', 'NL', 'PA', 'MB', 'PE', 'IN', 'IA', 'UT', 'TX', 'VT', 'AR', 'MA', 'RI', 'MN', 'FL'), nullable=True, comment='Two letter ISO-3166 political subdivision code.'),
    sa.Column('owner_city', sa.Text(), nullable=True, comment='City of owner.'),
    sa.Column('owner_country', sa.Enum('USA', 'CAN'), nullable=True, comment='Three letter ISO-3166 country code.'),
    sa.Column('owner_street_address', sa.Text(), nullable=True, comment='Steet address of owner.'),
    sa.Column('owner_zip_code', sa.Text(), nullable=True, comment='Zip code of owner.'),
    sa.Column('fraction_owned', sa.Float(), nullable=True, comment='Proportion of generator ownership attributable to this utility.'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia860__yearly_ownership_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name=op.f('fk_out_eia860__yearly_ownership_plant_id_eia_core_eia860__scd_generators')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia860__yearly_ownership_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia860__yearly_ownership_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia860__yearly_ownership_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('report_date', 'plant_id_eia', 'generator_id', 'owner_utility_id_eia', name=op.f('pk_out_eia860__yearly_ownership'))
    )
    op.create_table('out_eia923__yearly_boiler_fuel',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('boiler_id', sa.Text(), nullable=False, comment='Alphanumeric boiler ID.'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('energy_source_code', sa.Text(), nullable=False, comment='A 2-3 letter code indicating the energy source (e.g. fuel type) associated with the record.'),
    sa.Column('prime_mover_code', sa.Text(), nullable=False, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_consumed_units', sa.Float(), nullable=True, comment='Consumption of the fuel type in physical unit. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('fuel_mmbtu_per_unit', sa.Float(), nullable=True, comment='Heat content of the fuel in millions of Btus per physical unit.'),
    sa.Column('fuel_consumed_mmbtu', sa.Float(), nullable=True, comment='Total consumption of fuel in physical unit, year to date. Note: this is the total quantity consumed for both electricity and, in the case of combined heat and power plants, process steam production.'),
    sa.Column('sulfur_content_pct', sa.Float(), nullable=True, comment='Sulfur content percentage by weight to the nearest 0.01 percent.'),
    sa.Column('ash_content_pct', sa.Float(), nullable=True, comment='Ash content percentage by weight to the nearest 0.1 percent.'),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia923__yearly_boiler_fuel_energy_source_code_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id', 'report_date'], ['core_eia860__scd_boilers.plant_id_eia', 'core_eia860__scd_boilers.boiler_id', 'core_eia860__scd_boilers.report_date'], name=op.f('fk_out_eia923__yearly_boiler_fuel_plant_id_eia_core_eia860__scd_boilers')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__yearly_boiler_fuel_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia923__yearly_boiler_fuel_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia923__yearly_boiler_fuel_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__yearly_boiler_fuel_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'energy_source_code', 'prime_mover_code', 'report_date', name=op.f('pk_out_eia923__yearly_boiler_fuel'))
    )
    op.create_table('out_eia923__yearly_generation',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('net_generation_mwh', sa.Float(), nullable=True, comment='Net electricity generation for the specified period in megawatt-hours (MWh).'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name=op.f('fk_out_eia923__yearly_generation_plant_id_eia_core_eia860__scd_generators')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia923__yearly_generation_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia923__yearly_generation_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia923__yearly_generation_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name=op.f('pk_out_eia923__yearly_generation'))
    )
    op.create_table('out_eia__yearly_boilers',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('boiler_id', sa.Text(), nullable=False, comment='Alphanumeric boiler ID.'),
    sa.Column('air_flow_100pct_load_cubic_feet_per_minute', sa.Float(), nullable=True, comment='Total air flow including excess air at 100 percent load, reported at standard temperature and pressure (i.e. 68 F and one atmosphere pressure).'),
    sa.Column('boiler_fuel_code_1', sa.Text(), nullable=True, comment='The code representing the most predominant type of energy that fuels the boiler.'),
    sa.Column('boiler_fuel_code_2', sa.Text(), nullable=True, comment='The code representing the second most predominant type of energy that fuels the boiler.'),
    sa.Column('boiler_fuel_code_3', sa.Text(), nullable=True, comment='The code representing the third most predominant type of energy that fuels the boiler.'),
    sa.Column('boiler_fuel_code_4', sa.Text(), nullable=True, comment='The code representing the fourth most predominant type of energy that fuels the boiler.'),
    sa.Column('boiler_manufacturer', sa.Text(), nullable=True, comment='Name of boiler manufacturer.'),
    sa.Column('boiler_manufacturer_code', sa.Text(), nullable=True, comment='EIA short code for boiler manufacturer.'),
    sa.Column('boiler_operating_date', sa.Date(), nullable=True, comment='Date the boiler began or is planned to begin commercial operation.'),
    sa.Column('boiler_retirement_date', sa.Date(), nullable=True, comment='Date of the scheduled or effected retirement of the boiler.'),
    sa.Column('boiler_status', sa.Text(), nullable=True, comment='EIA short code identifying boiler operational status.'),
    sa.Column('boiler_type', sa.Text(), nullable=True, comment='EIA short code indicating the standards under which the boiler is operating as described in the U.S. EPA regulation under 40 CFR.'),
    sa.Column('city', sa.Text(), nullable=True),
    sa.Column('compliance_year_mercury', sa.Integer(), nullable=True, comment='Year boiler was or is expected to be in compliance with federal, state and/or local regulations for mercury emissions.'),
    sa.Column('compliance_year_nox', sa.Integer(), nullable=True, comment='Year boiler was or is expected to be in compliance with federal, state and/or local regulations for nitrogen oxide emissions.'),
    sa.Column('compliance_year_particulate', sa.Integer(), nullable=True, comment='Year boiler was or is expected to be in compliance with federal, state and/or local regulations for particulate matter emissions.'),
    sa.Column('compliance_year_so2', sa.Integer(), nullable=True, comment='Year boiler was or is expected to be in compliance with federal, state and/or local regulations for sulfur dioxide emissions.'),
    sa.Column('county', sa.Text(), nullable=True, comment='County name.'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.Column('efficiency_100pct_load', sa.Float(), nullable=True, comment='Boiler efficiency percentage when burning at 100 percent load to the nearest 0.1 percent.'),
    sa.Column('efficiency_50pct_load', sa.Float(), nullable=True, comment='Boiler efficiency percentage when burning at 50 percent load to the nearest 0.1 percent.'),
    sa.Column('firing_rate_using_coal_tons_per_hour', sa.Float(), nullable=True, comment='Design firing rate at maximum continuous steam flow for coal to the nearest 0.1 ton per hour.'),
    sa.Column('firing_rate_using_gas_mcf_per_hour', sa.Float(), nullable=True, comment='Design firing rate at maximum continuous steam flow for gas to the nearest 0.1 cubic feet per hour.'),
    sa.Column('firing_rate_using_oil_bbls_per_hour', sa.Float(), nullable=True, comment='Design firing rate at maximum continuous steam flow for pet coke to the nearest 0.1 barrels per hour.'),
    sa.Column('firing_rate_using_other_fuels', sa.Float(), nullable=True, comment='Design firing rate at maximum continuous steam flow for energy sources other than coal, petroleum, or natural gas.'),
    sa.Column('firing_type_1', sa.Text(), nullable=True, comment='EIA short code indicating the type of firing used by this boiler.'),
    sa.Column('firing_type_2', sa.Text(), nullable=True, comment='EIA short code indicating the type of firing used by this boiler.'),
    sa.Column('firing_type_3', sa.Text(), nullable=True, comment='EIA short code indicating the type of firing used by this boiler.'),
    sa.Column('fly_ash_reinjection', sa.Boolean(), nullable=True, comment='Indicates whether the boiler is capable of re-injecting fly ash.'),
    sa.Column('hrsg', sa.Boolean(), nullable=True, comment='indicates if the boiler is a heat recovery steam generator (HRSG).'),
    sa.Column('latitude', sa.Float(), nullable=True, comment="Latitude of the plant's location, in degrees."),
    sa.Column('longitude', sa.Float(), nullable=True, comment="Longitude of the plant's location, in degrees."),
    sa.Column('max_steam_flow_1000_lbs_per_hour', sa.Float(), nullable=True, comment='Maximum continuous steam flow at 100 percent load.'),
    sa.Column('mercury_control_existing_strategy_1', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_existing_strategy_2', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_existing_strategy_3', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_existing_strategy_4', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_existing_strategy_5', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_existing_strategy_6', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_proposed_strategy_1', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_proposed_strategy_2', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent mercury regulation.'),
    sa.Column('mercury_control_proposed_strategy_3', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent mercury regulation.'),
    sa.Column('new_source_review', sa.Boolean(), nullable=True, comment='Indicates whether the boiler is subject to New Source Review requirements.'),
    sa.Column('new_source_review_date', sa.Date(), nullable=True, comment='Month of issued New Source Review permit.'),
    sa.Column('new_source_review_permit', sa.Text(), nullable=True, comment='New Source Review permit number.'),
    sa.Column('nox_control_existing_caaa_compliance_strategy_1', sa.Text(), nullable=True, comment='Existing strategies to meet the nitrogen oxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('nox_control_existing_caaa_compliance_strategy_2', sa.Text(), nullable=True, comment='Existing strategies to meet the nitrogen oxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('nox_control_existing_caaa_compliance_strategy_3', sa.Text(), nullable=True, comment='Existing strategies to meet the nitrogen oxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('nox_control_existing_strategy_1', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent nitrogen oxide regulation.'),
    sa.Column('nox_control_existing_strategy_2', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent nitrogen oxide regulation.'),
    sa.Column('nox_control_existing_strategy_3', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent nitrogen oxide regulation.'),
    sa.Column('nox_control_manufacturer', sa.Text(), nullable=True, comment='Name of nitrogen oxide control manufacturer.'),
    sa.Column('nox_control_manufacturer_code', sa.Text(), nullable=True, comment='Code indicating the nitrogen oxide control burner manufacturer.'),
    sa.Column('nox_control_out_of_compliance_strategy_1', sa.Text(), nullable=True, comment='If boiler is not in compliance with nitrogen oxide regulations, strategy for compliance.'),
    sa.Column('nox_control_out_of_compliance_strategy_2', sa.Text(), nullable=True, comment='If boiler is not in compliance with nitrogen oxide regulations, strategy for compliance.'),
    sa.Column('nox_control_out_of_compliance_strategy_3', sa.Text(), nullable=True, comment='If boiler is not in compliance with nitrogen oxide regulations, strategy for compliance.'),
    sa.Column('nox_control_planned_caaa_compliance_strategy_1', sa.Text(), nullable=True, comment='Planned strategies to meet the nitrogen oxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('nox_control_planned_caaa_compliance_strategy_2', sa.Text(), nullable=True, comment='Planned strategies to meet the nitrogen oxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('nox_control_planned_caaa_compliance_strategy_3', sa.Text(), nullable=True, comment='Planned strategies to meet the nitrogen oxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('nox_control_proposed_strategy_1', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent nitrogen oxide regulation.'),
    sa.Column('nox_control_proposed_strategy_2', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent nitrogen oxide regulation.'),
    sa.Column('nox_control_proposed_strategy_3', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent nitrogen oxide regulation.'),
    sa.Column('nox_control_status_code', sa.Text(), nullable=True, comment='Nitrogen oxide control status code.'),
    sa.Column('particulate_control_out_of_compliance_strategy_1', sa.Text(), nullable=True, comment='If boiler is not in compliance with particulate matter regulations, strategy for compliance.'),
    sa.Column('particulate_control_out_of_compliance_strategy_2', sa.Text(), nullable=True, comment='If boiler is not in compliance with particulate matter regulations, strategy for compliance.'),
    sa.Column('particulate_control_out_of_compliance_strategy_3', sa.Text(), nullable=True, comment='If boiler is not in compliance with particulate matter regulations, strategy for compliance.'),
    sa.Column('regulation_mercury', sa.Text(), nullable=True, comment='Most stringent type of statute or regulation code under which the boiler is operating for mercury control standards.'),
    sa.Column('regulation_nox', sa.Text(), nullable=True, comment='EIA short code for most stringent type of statute or regulation code under which the boiler is operating for nitrogen oxide control standards.'),
    sa.Column('regulation_particulate', sa.Text(), nullable=True, comment='EIA short code for most stringent type of statute or regulation code under which the boiler is operating for particulate matter control standards.'),
    sa.Column('regulation_so2', sa.Text(), nullable=True, comment='EIA short code for most stringent type of statute or regulation code under which the boiler is operating for sulfur dioxide control standards.'),
    sa.Column('so2_control_existing_caaa_compliance_strategy_1', sa.Text(), nullable=True, comment='Existing strategies to meet the sulfur dioxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('so2_control_existing_caaa_compliance_strategy_2', sa.Text(), nullable=True, comment='Existing strategies to meet the sulfur dioxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('so2_control_existing_caaa_compliance_strategy_3', sa.Text(), nullable=True, comment='Existing strategies to meet the sulfur dioxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('so2_control_existing_strategy_1', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent sulfur dioxide regulation.'),
    sa.Column('so2_control_existing_strategy_2', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent sulfur dioxide regulation.'),
    sa.Column('so2_control_existing_strategy_3', sa.Text(), nullable=True, comment='Existing strategy to comply with the most stringent sulfur dioxide regulation.'),
    sa.Column('so2_control_out_of_compliance_strategy_1', sa.Text(), nullable=True, comment='If boiler is not in compliance with sulfur dioxide regulations, strategy for compliance.'),
    sa.Column('so2_control_out_of_compliance_strategy_2', sa.Text(), nullable=True, comment='If boiler is not in compliance with sulfur dioxide regulations, strategy for compliance.'),
    sa.Column('so2_control_out_of_compliance_strategy_3', sa.Text(), nullable=True, comment='If boiler is not in compliance with sulfur dioxide regulations, strategy for compliance.'),
    sa.Column('so2_control_planned_caaa_compliance_strategy_1', sa.Text(), nullable=True, comment='Planned strategies to meet the sulfur dioxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('so2_control_planned_caaa_compliance_strategy_2', sa.Text(), nullable=True, comment='Planned strategies to meet the sulfur dioxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('so2_control_planned_caaa_compliance_strategy_3', sa.Text(), nullable=True, comment='Planned strategies to meet the sulfur dioxide requirements of Title IV of the Clean Air Act Amendment of 1990.'),
    sa.Column('so2_control_proposed_strategy_1', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent sulfur dioxide regulation.'),
    sa.Column('so2_control_proposed_strategy_2', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent sulfur dioxide regulation.'),
    sa.Column('so2_control_proposed_strategy_3', sa.Text(), nullable=True, comment='Proposed strategy to comply with the most stringent sulfur dioxide regulation.'),
    sa.Column('standard_nox_rate', sa.Float(), nullable=True, comment='Numeric value for the unit of measurement specified for nitrogen oxide.'),
    sa.Column('standard_particulate_rate', sa.Float(), nullable=True, comment='Numeric value for the unit of measurement specified for particulate matter.'),
    sa.Column('standard_so2_percent_scrubbed', sa.Float(), nullable=True, comment='The percent of sulfur dioxide to be scrubbed specified by the most stringent sulfur dioxide regulation.'),
    sa.Column('standard_so2_rate', sa.Float(), nullable=True, comment='Numeric value for the unit of measurement specified for sulfur dioxide.'),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('street_address', sa.Text(), nullable=True),
    sa.Column('timezone', sa.Enum('Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Timbuktu', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/ComodRivadavia', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Atka', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Buenos_Aires', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Catamarca', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Ciudad_Juarez', 'America/Coral_Harbour', 'America/Cordoba', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Nelson', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indianapolis', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Jujuy', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Knox_IN', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Louisville', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Mendoza', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Nuuk', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Punta_Arenas', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Rosario', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Shiprock', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Virgin', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/South_Pole', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Ashkhabad', 'Asia/Atyrau', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Chungking', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Harbin', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Katmandu', 'Asia/Khandyga', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macao', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qostanay', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Saigon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tel_Aviv', 'Asia/Thimbu', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Tomsk', 'Asia/Ujung_Pandang', 'Asia/Ulaanbaatar', 'Asia/Ulan_Bator', 'Asia/Urumqi', 'Asia/Ust-Nera', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yangon', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Faroe', 'Atlantic/Jan_Mayen', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Canberra', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/NSW', 'Australia/North', 'Australia/Perth', 'Australia/Queensland', 'Australia/South', 'Australia/Sydney', 'Australia/Tasmania', 'Australia/Victoria', 'Australia/West', 'Australia/Yancowinna', 'Brazil/Acre', 'Brazil/DeNoronha', 'Brazil/East', 'Brazil/West', 'CET', 'CST6CDT', 'Canada/Atlantic', 'Canada/Central', 'Canada/Eastern', 'Canada/Mountain', 'Canada/Newfoundland', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Cuba', 'EET', 'EST', 'EST5EDT', 'Egypt', 'Eire', 'Etc/GMT', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-0', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/GMT0', 'Etc/Greenwich', 'Etc/UCT', 'Etc/UTC', 'Etc/Universal', 'Etc/Zulu', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Kirov', 'Europe/Kyiv', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'GB', 'GB-Eire', 'GMT', 'GMT+0', 'GMT-0', 'GMT0', 'Greenwich', 'HST', 'Hongkong', 'Iceland', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Iran', 'Israel', 'Jamaica', 'Japan', 'Kwajalein', 'Libya', 'MET', 'MST', 'MST7MDT', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'NZ', 'NZ-CHAT', 'Navajo', 'PRC', 'PST8PDT', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Bougainville', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kanton', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'Poland', 'Portugal', 'ROC', 'ROK', 'Singapore', 'Turkey', 'UCT', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Samoa', 'UTC', 'Universal', 'W-SU', 'WET', 'Zulu'), nullable=True, comment='IANA timezone name'),
    sa.Column('turndown_ratio', sa.Float(), nullable=True, comment='The turndown ratio for the boiler.'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('unit_nox', sa.Text(), nullable=True, comment='Numeric value for the unit of measurement specified for nitrogen oxide.'),
    sa.Column('unit_particulate', sa.Text(), nullable=True, comment='Numeric value for the unit of measurement specified for particulate matter.'),
    sa.Column('unit_so2', sa.Text(), nullable=True, comment='Numeric value for the unit of measurement specified for sulfur dioxide.'),
    sa.Column('waste_heat_input_mmbtu_per_hour', sa.Float(), nullable=True, comment='Design waste-heat input rate at maximum continuous steam flow where a waste-heat boiler is a boiler that receives all or a substantial portion of its energy input from the noncumbustible exhaust gases of a separate fuel-burning process (MMBtu per hour).'),
    sa.Column('wet_dry_bottom', sa.Text(), nullable=True, comment='Wet or Dry Bottom where Wet Bottom is defined as slag tanks that are installed at furnace throat to contain and remove molten ash from the furnace, and Dry Bottom is defined as having no slag tanks at furnace throat area, throat area is clear, and bottom ash drops through throat to bottom ash water hoppers.'),
    sa.Column('zip_code', sa.Text(), nullable=True, comment='Five digit US Zip Code.'),
    sa.ForeignKeyConstraint(['boiler_fuel_code_1'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_boilers_boiler_fuel_code_1_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['boiler_fuel_code_2'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_boilers_boiler_fuel_code_2_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['boiler_fuel_code_3'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_boilers_boiler_fuel_code_3_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['boiler_fuel_code_4'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_boilers_boiler_fuel_code_4_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['boiler_manufacturer_code'], ['core_eia__codes_environmental_equipment_manufacturers.code'], name=op.f('fk_out_eia__yearly_boilers_boiler_manufacturer_code_core_eia__codes_environmental_equipment_manufacturers')),
    sa.ForeignKeyConstraint(['boiler_status'], ['core_eia__codes_boiler_status.code'], name=op.f('fk_out_eia__yearly_boilers_boiler_status_core_eia__codes_boiler_status')),
    sa.ForeignKeyConstraint(['boiler_type'], ['core_eia__codes_boiler_types.code'], name=op.f('fk_out_eia__yearly_boilers_boiler_type_core_eia__codes_boiler_types')),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia__yearly_boilers_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['firing_type_1'], ['core_eia__codes_firing_types.code'], name=op.f('fk_out_eia__yearly_boilers_firing_type_1_core_eia__codes_firing_types')),
    sa.ForeignKeyConstraint(['firing_type_2'], ['core_eia__codes_firing_types.code'], name=op.f('fk_out_eia__yearly_boilers_firing_type_2_core_eia__codes_firing_types')),
    sa.ForeignKeyConstraint(['firing_type_3'], ['core_eia__codes_firing_types.code'], name=op.f('fk_out_eia__yearly_boilers_firing_type_3_core_eia__codes_firing_types')),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_1'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_existing_strategy_1_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_2'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_existing_strategy_2_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_3'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_existing_strategy_3_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_4'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_existing_strategy_4_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_5'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_existing_strategy_5_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_6'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_existing_strategy_6_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_proposed_strategy_1'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_proposed_strategy_1_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_proposed_strategy_2'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_proposed_strategy_2_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['mercury_control_proposed_strategy_3'], ['core_eia__codes_mercury_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_mercury_control_proposed_strategy_3_core_eia__codes_mercury_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_existing_caaa_compliance_strategy_1'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_existing_caaa_compliance_strategy_1_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_existing_caaa_compliance_strategy_2'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_existing_caaa_compliance_strategy_2_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_existing_caaa_compliance_strategy_3'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_existing_caaa_compliance_strategy_3_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_manufacturer_code'], ['core_eia__codes_environmental_equipment_manufacturers.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_manufacturer_code_core_eia__codes_environmental_equipment_manufacturers')),
    sa.ForeignKeyConstraint(['nox_control_out_of_compliance_strategy_1'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_out_of_compliance_strategy_1_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_out_of_compliance_strategy_2'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_out_of_compliance_strategy_2_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_out_of_compliance_strategy_3'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_out_of_compliance_strategy_3_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_planned_caaa_compliance_strategy_1'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_planned_caaa_compliance_strategy_1_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_planned_caaa_compliance_strategy_2'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_planned_caaa_compliance_strategy_2_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_planned_caaa_compliance_strategy_3'], ['core_eia__codes_nox_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_planned_caaa_compliance_strategy_3_core_eia__codes_nox_compliance_strategies')),
    sa.ForeignKeyConstraint(['nox_control_status_code'], ['core_eia__codes_nox_control_status.code'], name=op.f('fk_out_eia__yearly_boilers_nox_control_status_code_core_eia__codes_nox_control_status')),
    sa.ForeignKeyConstraint(['particulate_control_out_of_compliance_strategy_1'], ['core_eia__codes_particulate_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_particulate_control_out_of_compliance_strategy_1_core_eia__codes_particulate_compliance_strategies')),
    sa.ForeignKeyConstraint(['particulate_control_out_of_compliance_strategy_2'], ['core_eia__codes_particulate_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_particulate_control_out_of_compliance_strategy_2_core_eia__codes_particulate_compliance_strategies')),
    sa.ForeignKeyConstraint(['particulate_control_out_of_compliance_strategy_3'], ['core_eia__codes_particulate_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_particulate_control_out_of_compliance_strategy_3_core_eia__codes_particulate_compliance_strategies')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id', 'report_date'], ['core_eia860__scd_boilers.plant_id_eia', 'core_eia860__scd_boilers.boiler_id', 'core_eia860__scd_boilers.report_date'], name=op.f('fk_out_eia__yearly_boilers_plant_id_eia_core_eia860__scd_boilers')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia__yearly_boilers_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['regulation_mercury'], ['core_eia__codes_regulations.code'], name=op.f('fk_out_eia__yearly_boilers_regulation_mercury_core_eia__codes_regulations')),
    sa.ForeignKeyConstraint(['regulation_nox'], ['core_eia__codes_regulations.code'], name=op.f('fk_out_eia__yearly_boilers_regulation_nox_core_eia__codes_regulations')),
    sa.ForeignKeyConstraint(['regulation_particulate'], ['core_eia__codes_regulations.code'], name=op.f('fk_out_eia__yearly_boilers_regulation_particulate_core_eia__codes_regulations')),
    sa.ForeignKeyConstraint(['regulation_so2'], ['core_eia__codes_regulations.code'], name=op.f('fk_out_eia__yearly_boilers_regulation_so2_core_eia__codes_regulations')),
    sa.ForeignKeyConstraint(['so2_control_existing_caaa_compliance_strategy_1'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_existing_caaa_compliance_strategy_1_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_existing_caaa_compliance_strategy_2'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_existing_caaa_compliance_strategy_2_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_existing_caaa_compliance_strategy_3'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_existing_caaa_compliance_strategy_3_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_out_of_compliance_strategy_1'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_out_of_compliance_strategy_1_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_out_of_compliance_strategy_2'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_out_of_compliance_strategy_2_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_out_of_compliance_strategy_3'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_out_of_compliance_strategy_3_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_planned_caaa_compliance_strategy_1'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_planned_caaa_compliance_strategy_1_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_planned_caaa_compliance_strategy_2'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_planned_caaa_compliance_strategy_2_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['so2_control_planned_caaa_compliance_strategy_3'], ['core_eia__codes_so2_compliance_strategies.code'], name=op.f('fk_out_eia__yearly_boilers_so2_control_planned_caaa_compliance_strategy_3_core_eia__codes_so2_compliance_strategies')),
    sa.ForeignKeyConstraint(['unit_nox'], ['core_eia__codes_nox_units.code'], name=op.f('fk_out_eia__yearly_boilers_unit_nox_core_eia__codes_nox_units')),
    sa.ForeignKeyConstraint(['unit_particulate'], ['core_eia__codes_particulate_units.code'], name=op.f('fk_out_eia__yearly_boilers_unit_particulate_core_eia__codes_particulate_units')),
    sa.ForeignKeyConstraint(['unit_so2'], ['core_eia__codes_so2_units.code'], name=op.f('fk_out_eia__yearly_boilers_unit_so2_core_eia__codes_so2_units')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia__yearly_boilers_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia__yearly_boilers_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.ForeignKeyConstraint(['wet_dry_bottom'], ['core_eia__codes_wet_dry_bottom.code'], name=op.f('fk_out_eia__yearly_boilers_wet_dry_bottom_core_eia__codes_wet_dry_bottom')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'report_date', name=op.f('pk_out_eia__yearly_boilers'))
    )
    op.create_table('out_eia__yearly_generators',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('plant_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL plant ID. May not be constant over time.'),
    sa.Column('plant_name_eia', sa.Text(), nullable=True, comment='Plant name.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=True, comment='The EIA Utility Identification number.'),
    sa.Column('utility_id_pudl', sa.Integer(), nullable=True, comment='A manually assigned PUDL utility ID. May not be stable over time.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('associated_combined_heat_power', sa.Boolean(), nullable=True, comment='Indicates whether the generator is associated with a combined heat and power system'),
    sa.Column('bga_source', sa.Text(), nullable=True, comment='The source from where the unit_id_pudl is compiled. The unit_id_pudl comes directly from EIA 860, or string association (which looks at all the boilers and generators that are not associated with a unit and tries to find a matching string in the respective collection of boilers or generator), or from a unit connection (where the unit_id_eia is employed to find additional boiler generator connections).'),
    sa.Column('bypass_heat_recovery', sa.Boolean(), nullable=True, comment='Can this generator operate while bypassing the heat recovery steam generator?'),
    sa.Column('capacity_mw', sa.Float(), nullable=True, comment='Total installed (nameplate) capacity, in megawatts.'),
    sa.Column('carbon_capture', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses carbon capture technology.'),
    sa.Column('city', sa.Text(), nullable=True),
    sa.Column('cofire_fuels', sa.Boolean(), nullable=True, comment='Can the generator co-fire fuels?.'),
    sa.Column('county', sa.Text(), nullable=True, comment='County name.'),
    sa.Column('current_planned_generator_operating_date', sa.Date(), nullable=True, comment='The most recently updated effective date on which the generator is scheduled to start operation'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.Column('deliver_power_transgrid', sa.Boolean(), nullable=True, comment='Indicate whether the generator can deliver power to the transmission grid.'),
    sa.Column('distributed_generation', sa.Boolean(), nullable=True, comment='Whether the generator is considered distributed generation'),
    sa.Column('duct_burners', sa.Boolean(), nullable=True, comment='Indicates whether the unit has duct-burners for supplementary firing of the turbine exhaust gas'),
    sa.Column('energy_source_1_transport_1', sa.Text(), nullable=True, comment='Primary mode of transport for energy source 1.'),
    sa.Column('energy_source_1_transport_2', sa.Text(), nullable=True, comment='Secondary mode of transport for energy source 1.'),
    sa.Column('energy_source_1_transport_3', sa.Text(), nullable=True, comment='Tertiary mode of transport for energy source 1.'),
    sa.Column('energy_source_2_transport_1', sa.Text(), nullable=True, comment='Primary mode of transport for energy source 2.'),
    sa.Column('energy_source_2_transport_2', sa.Text(), nullable=True, comment='Secondary mode of transport for energy source 2.'),
    sa.Column('energy_source_2_transport_3', sa.Text(), nullable=True, comment='Tertiary mode of transport for energy source 2.'),
    sa.Column('energy_source_code_1', sa.Text(), nullable=True, comment='The code representing the most predominant type of energy that fuels the generator.'),
    sa.Column('energy_source_code_2', sa.Text(), nullable=True, comment='The code representing the second most predominant type of energy that fuels the generator'),
    sa.Column('energy_source_code_3', sa.Text(), nullable=True, comment='The code representing the third most predominant type of energy that fuels the generator'),
    sa.Column('energy_source_code_4', sa.Text(), nullable=True, comment='The code representing the fourth most predominant type of energy that fuels the generator'),
    sa.Column('energy_source_code_5', sa.Text(), nullable=True, comment='The code representing the fifth most predominant type of energy that fuels the generator'),
    sa.Column('energy_source_code_6', sa.Text(), nullable=True, comment='The code representing the sixth most predominant type of energy that fuels the generator'),
    sa.Column('energy_storage_capacity_mwh', sa.Float(), nullable=True, comment='Energy storage capacity in MWh (e.g. for batteries).'),
    sa.Column('ferc_qualifying_facility', sa.Boolean(), nullable=True, comment='Indicatates whether or not a generator is a qualifying FERC cogeneation facility.'),
    sa.Column('fluidized_bed_tech', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses fluidized bed technology'),
    sa.Column('fuel_type_code_pudl', sa.Enum('coal', 'gas', 'hydro', 'nuclear', 'oil', 'other', 'solar', 'waste', 'wind'), nullable=True, comment='Simplified fuel type code used in PUDL'),
    sa.Column('fuel_type_count', sa.Integer(), nullable=True, comment='A count of how many different simple energy sources there are associated with a generator.'),
    sa.Column('generator_operating_date', sa.Date(), nullable=True, comment='Date the generator began commercial operation.'),
    sa.Column('generator_retirement_date', sa.Date(), nullable=True, comment='Date of the scheduled or effected retirement of the generator.'),
    sa.Column('latitude', sa.Float(), nullable=True, comment="Latitude of the plant's location, in degrees."),
    sa.Column('longitude', sa.Float(), nullable=True, comment="Longitude of the plant's location, in degrees."),
    sa.Column('minimum_load_mw', sa.Float(), nullable=True, comment='The minimum load at which the generator can operate at continuosuly.'),
    sa.Column('multiple_fuels', sa.Boolean(), nullable=True, comment='Can the generator burn multiple fuels?'),
    sa.Column('nameplate_power_factor', sa.Float(), nullable=True, comment='The nameplate power factor of the generator.'),
    sa.Column('net_capacity_mwdc', sa.Float(), nullable=True, comment='Generation capacity in megawatts of direct current that is subject to a net metering agreement. Typically used for behind-the-meter solar PV.'),
    sa.Column('operating_switch', sa.Text(), nullable=True, comment='Indicates whether the fuel switching generator can switch when operating'),
    sa.Column('operational_status', sa.Text(), nullable=True, comment='The operating status of the asset. For generators this is based on which tab the generator was listed in in EIA 860.'),
    sa.Column('operational_status_code', sa.Text(), nullable=True, comment='The operating status of the asset.'),
    sa.Column('original_planned_generator_operating_date', sa.Date(), nullable=True, comment='The date the generator was originally scheduled to be operational'),
    sa.Column('other_combustion_tech', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses other combustion technologies'),
    sa.Column('other_modifications_date', sa.Date(), nullable=True, comment='Planned effective date that the generator is scheduled to enter commercial operation after any other planned modification is complete.'),
    sa.Column('other_planned_modifications', sa.Boolean(), nullable=True, comment='Indicates whether there are there other modifications planned for the generator.'),
    sa.Column('owned_by_non_utility', sa.Boolean(), nullable=True, comment='Whether any part of generator is owned by a nonutilty'),
    sa.Column('ownership_code', sa.Text(), nullable=True, comment='Identifies the ownership for each generator.'),
    sa.Column('planned_derate_date', sa.Date(), nullable=True, comment='Planned effective month that the generator is scheduled to enter operation after the derate modification.'),
    sa.Column('planned_energy_source_code_1', sa.Text(), nullable=True, comment='New energy source code for the planned repowered generator.'),
    sa.Column('planned_generator_retirement_date', sa.Date(), nullable=True, comment='Planned effective date of the scheduled retirement of the generator.'),
    sa.Column('planned_modifications', sa.Boolean(), nullable=True, comment='Indicates whether there are any planned capacity uprates/derates, repowering, other modifications, or generator retirements scheduled for the next 5 years.'),
    sa.Column('planned_net_summer_capacity_derate_mw', sa.Float(), nullable=True, comment='Decrease in summer capacity expected to be realized from the derate modification to the equipment.'),
    sa.Column('planned_net_summer_capacity_uprate_mw', sa.Float(), nullable=True, comment='Increase in summer capacity expected to be realized from the modification to the equipment.'),
    sa.Column('planned_net_winter_capacity_derate_mw', sa.Float(), nullable=True, comment='Decrease in winter capacity expected to be realized from the derate modification to the equipment.'),
    sa.Column('planned_net_winter_capacity_uprate_mw', sa.Float(), nullable=True, comment='Increase in winter capacity expected to be realized from the uprate modification to the equipment.'),
    sa.Column('planned_new_capacity_mw', sa.Float(), nullable=True, comment='The expected new namplate capacity for the generator.'),
    sa.Column('planned_new_prime_mover_code', sa.Text(), nullable=True, comment='New prime mover for the planned repowered generator.'),
    sa.Column('planned_repower_date', sa.Date(), nullable=True, comment='Planned effective date that the generator is scheduled to enter operation after the repowering is complete.'),
    sa.Column('planned_uprate_date', sa.Date(), nullable=True, comment='Planned effective date that the generator is scheduled to enter operation after the uprate modification.'),
    sa.Column('previously_canceled', sa.Boolean(), nullable=True, comment='Indicates whether the generator was previously reported as indefinitely postponed or canceled'),
    sa.Column('prime_mover_code', sa.Text(), nullable=True, comment='Code for the type of prime mover (e.g. CT, CG)'),
    sa.Column('pulverized_coal_tech', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses pulverized coal technology'),
    sa.Column('reactive_power_output_mvar', sa.Float(), nullable=True, comment='Reactive Power Output (MVAr)'),
    sa.Column('rto_iso_lmp_node_id', sa.Text(), nullable=True, comment='The designation used to identify the price node in RTO/ISO Locational Marginal Price reports'),
    sa.Column('rto_iso_location_wholesale_reporting_id', sa.Text(), nullable=True, comment='The designation used to report ths specific location of the wholesale sales transactions to FERC for the Electric Quarterly Report'),
    sa.Column('solid_fuel_gasification', sa.Boolean(), nullable=True, comment='Indicates whether the generator is part of a solid fuel gasification system'),
    sa.Column('startup_source_code_1', sa.Text(), nullable=True, comment='The code representing the first, second, third or fourth start-up and flame stabilization energy source used by the combustion unit(s) associated with this generator.'),
    sa.Column('startup_source_code_2', sa.Text(), nullable=True, comment='The code representing the first, second, third or fourth start-up and flame stabilization energy source used by the combustion unit(s) associated with this generator.'),
    sa.Column('startup_source_code_3', sa.Text(), nullable=True, comment='The code representing the first, second, third or fourth start-up and flame stabilization energy source used by the combustion unit(s) associated with this generator.'),
    sa.Column('startup_source_code_4', sa.Text(), nullable=True, comment='The code representing the first, second, third or fourth start-up and flame stabilization energy source used by the combustion unit(s) associated with this generator.'),
    sa.Column('state', sa.Text(), nullable=True, comment='Two letter US state abbreviation.'),
    sa.Column('stoker_tech', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses stoker technology'),
    sa.Column('street_address', sa.Text(), nullable=True),
    sa.Column('subcritical_tech', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses subcritical technology'),
    sa.Column('summer_capacity_estimate', sa.Boolean(), nullable=True, comment='Whether the summer capacity value was an estimate'),
    sa.Column('summer_capacity_mw', sa.Float(), nullable=True, comment='The net summer capacity.'),
    sa.Column('summer_estimated_capability_mw', sa.Float(), nullable=True, comment='EIA estimated summer capacity (in MWh).'),
    sa.Column('supercritical_tech', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses supercritical technology'),
    sa.Column('switch_oil_gas', sa.Boolean(), nullable=True, comment='Indicates whether the generator switch between oil and natural gas.'),
    sa.Column('syncronized_transmission_grid', sa.Boolean(), nullable=True, comment='Indicates whether standby generators (SB status) can be synchronized to the grid.'),
    sa.Column('technology_description', sa.Text(), nullable=True, comment='High level description of the technology used by the generator to produce electricity.'),
    sa.Column('time_cold_shutdown_full_load_code', sa.Text(), nullable=True, comment='The minimum amount of time required to bring the unit to full load from shutdown.'),
    sa.Column('timezone', sa.Enum('Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Africa/Lagos', 'Africa/Libreville', 'Africa/Lome', 'Africa/Luanda', 'Africa/Lubumbashi', 'Africa/Lusaka', 'Africa/Malabo', 'Africa/Maputo', 'Africa/Maseru', 'Africa/Mbabane', 'Africa/Mogadishu', 'Africa/Monrovia', 'Africa/Nairobi', 'Africa/Ndjamena', 'Africa/Niamey', 'Africa/Nouakchott', 'Africa/Ouagadougou', 'Africa/Porto-Novo', 'Africa/Sao_Tome', 'Africa/Timbuktu', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Antigua', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/ComodRivadavia', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Atka', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Buenos_Aires', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Catamarca', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Ciudad_Juarez', 'America/Coral_Harbour', 'America/Cordoba', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Curacao', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Dominica', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Nelson', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Grenada', 'America/Guadeloupe', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Indianapolis', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Indianapolis', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Jujuy', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/Knox_IN', 'America/Kralendijk', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Louisville', 'America/Lower_Princes', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Marigot', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Mendoza', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Montserrat', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Nuuk', 'America/Ojinaga', 'America/Panama', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Port_of_Spain', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Punta_Arenas', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Rio_Branco', 'America/Rosario', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Shiprock', 'America/Sitka', 'America/St_Barthelemy', 'America/St_Johns', 'America/St_Kitts', 'America/St_Lucia', 'America/St_Thomas', 'America/St_Vincent', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Tijuana', 'America/Toronto', 'America/Tortola', 'America/Vancouver', 'America/Virgin', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/South_Pole', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Ashkhabad', 'Asia/Atyrau', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Barnaul', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Chungking', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dhaka', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Famagusta', 'Asia/Gaza', 'Asia/Harbin', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Katmandu', 'Asia/Khandyga', 'Asia/Kolkata', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Kuwait', 'Asia/Macao', 'Asia/Macau', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Muscat', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Phnom_Penh', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qatar', 'Asia/Qostanay', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Riyadh', 'Asia/Saigon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Shanghai', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Tel_Aviv', 'Asia/Thimbu', 'Asia/Thimphu', 'Asia/Tokyo', 'Asia/Tomsk', 'Asia/Ujung_Pandang', 'Asia/Ulaanbaatar', 'Asia/Ulan_Bator', 'Asia/Urumqi', 'Asia/Ust-Nera', 'Asia/Vientiane', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yangon', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Faroe', 'Atlantic/Jan_Mayen', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/St_Helena', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Canberra', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Lord_Howe', 'Australia/Melbourne', 'Australia/NSW', 'Australia/North', 'Australia/Perth', 'Australia/Queensland', 'Australia/South', 'Australia/Sydney', 'Australia/Tasmania', 'Australia/Victoria', 'Australia/West', 'Australia/Yancowinna', 'Brazil/Acre', 'Brazil/DeNoronha', 'Brazil/East', 'Brazil/West', 'CET', 'CST6CDT', 'Canada/Atlantic', 'Canada/Central', 'Canada/Eastern', 'Canada/Mountain', 'Canada/Newfoundland', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Cuba', 'EET', 'EST', 'EST5EDT', 'Egypt', 'Eire', 'Etc/GMT', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-0', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/GMT0', 'Etc/Greenwich', 'Etc/UCT', 'Etc/UTC', 'Etc/Universal', 'Etc/Zulu', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Kirov', 'Europe/Kyiv', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'GB', 'GB-Eire', 'GMT', 'GMT+0', 'GMT-0', 'GMT0', 'Greenwich', 'HST', 'Hongkong', 'Iceland', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Iran', 'Israel', 'Jamaica', 'Japan', 'Kwajalein', 'Libya', 'MET', 'MST', 'MST7MDT', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'NZ', 'NZ-CHAT', 'Navajo', 'PRC', 'PST8PDT', 'Pacific/Apia', 'Pacific/Auckland', 'Pacific/Bougainville', 'Pacific/Chatham', 'Pacific/Chuuk', 'Pacific/Easter', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kanton', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'Poland', 'Portugal', 'ROC', 'ROK', 'Singapore', 'Turkey', 'UCT', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Samoa', 'UTC', 'Universal', 'W-SU', 'WET', 'Zulu'), nullable=True, comment='IANA timezone name'),
    sa.Column('topping_bottoming_code', sa.Text(), nullable=True, comment='If the generator is associated with a combined heat and power system, indicates whether the generator is part of a topping cycle or a bottoming cycle'),
    sa.Column('turbines_inverters_hydrokinetics', sa.Integer(), nullable=True, comment='Number of wind turbines, or hydrokinetic buoys.'),
    sa.Column('turbines_num', sa.Integer(), nullable=True, comment='Number of wind turbines, or hydrokinetic buoys.'),
    sa.Column('ultrasupercritical_tech', sa.Boolean(), nullable=True, comment='Indicates whether the generator uses ultra-supercritical technology'),
    sa.Column('unit_id_pudl', sa.Integer(), nullable=True, comment='Dynamically assigned PUDL unit id. WARNING: This ID is not guaranteed to be static long term as the input data and algorithm may evolve over time.'),
    sa.Column('uprate_derate_completed_date', sa.Date(), nullable=True, comment='The date when the uprate or derate was completed.'),
    sa.Column('uprate_derate_during_year', sa.Boolean(), nullable=True, comment='Was an uprate or derate completed on this generator during the reporting year?'),
    sa.Column('winter_capacity_estimate', sa.Boolean(), nullable=True, comment='Whether the winter capacity value was an estimate'),
    sa.Column('winter_capacity_mw', sa.Float(), nullable=True, comment='The net winter capacity.'),
    sa.Column('winter_estimated_capability_mw', sa.Float(), nullable=True, comment='EIA estimated winter capacity (in MWh).'),
    sa.Column('zip_code', sa.Text(), nullable=True, comment='Five digit US Zip Code.'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_out_eia__yearly_generators_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['energy_source_1_transport_1'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_1_transport_1_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['energy_source_1_transport_2'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_1_transport_2_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['energy_source_1_transport_3'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_1_transport_3_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['energy_source_2_transport_1'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_2_transport_1_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['energy_source_2_transport_2'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_2_transport_2_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['energy_source_2_transport_3'], ['core_eia__codes_fuel_transportation_modes.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_2_transport_3_core_eia__codes_fuel_transportation_modes')),
    sa.ForeignKeyConstraint(['energy_source_code_1'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_code_1_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['energy_source_code_2'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_code_2_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['energy_source_code_3'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_code_3_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['energy_source_code_4'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_code_4_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['energy_source_code_5'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_code_5_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['energy_source_code_6'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_energy_source_code_6_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['operational_status_code'], ['core_eia__codes_operational_status.code'], name=op.f('fk_out_eia__yearly_generators_operational_status_code_core_eia__codes_operational_status')),
    sa.ForeignKeyConstraint(['planned_energy_source_code_1'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_planned_energy_source_code_1_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['planned_new_prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia__yearly_generators_planned_new_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name=op.f('fk_out_eia__yearly_generators_plant_id_eia_core_eia860__scd_generators')),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name=op.f('fk_out_eia__yearly_generators_plant_id_pudl_core_pudl__entity_plants_pudl')),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name=op.f('fk_out_eia__yearly_generators_prime_mover_code_core_eia__codes_prime_movers')),
    sa.ForeignKeyConstraint(['startup_source_code_1'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_startup_source_code_1_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['startup_source_code_2'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_startup_source_code_2_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['startup_source_code_3'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_startup_source_code_3_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['startup_source_code_4'], ['core_eia__codes_energy_sources.code'], name=op.f('fk_out_eia__yearly_generators_startup_source_code_4_core_eia__codes_energy_sources')),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name=op.f('fk_out_eia__yearly_generators_utility_id_eia_core_eia860__scd_utilities')),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name=op.f('fk_out_eia__yearly_generators_utility_id_pudl_core_pudl__entity_utilities_pudl')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name=op.f('pk_out_eia__yearly_generators'))
    )
    op.drop_table('denorm_generation_monthly_eia923')
    op.drop_table('denorm_fuel_receipts_costs_eia923')
    op.drop_table('denorm_plants_utilities_eia')
    op.drop_table('denorm_boiler_fuel_eia923')
    op.drop_table('denorm_emissions_control_equipment_eia860')
    op.drop_table('denorm_generation_fuel_combined_yearly_eia923')
    op.drop_table('denorm_generation_yearly_eia923')
    op.drop_table('denorm_utilities_eia')
    op.drop_table('denorm_generators_eia')
    op.drop_table('denorm_generation_eia923')
    op.drop_table('denorm_generation_fuel_combined_eia923')
    op.drop_table('denorm_plants_eia')
    op.drop_table('denorm_boilers_eia')
    op.drop_table('denorm_generation_fuel_combined_monthly_eia923')
    op.drop_table('denorm_boiler_fuel_monthly_eia923')
    op.drop_table('denorm_fuel_receipts_costs_yearly_eia923')
    op.drop_table('denorm_boiler_fuel_yearly_eia923')
    op.drop_table('denorm_fuel_receipts_costs_monthly_eia923')
    op.drop_table('denorm_ownership_eia860')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('denorm_ownership_eia860',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('generator_id', sa.TEXT(), nullable=False),
    sa.Column('owner_utility_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('owner_name', sa.TEXT(), nullable=True),
    sa.Column('owner_state', sa.VARCHAR(length=2), nullable=True),
    sa.Column('owner_city', sa.TEXT(), nullable=True),
    sa.Column('owner_country', sa.VARCHAR(length=3), nullable=True),
    sa.Column('owner_street_address', sa.TEXT(), nullable=True),
    sa.Column('owner_zip_code', sa.TEXT(), nullable=True),
    sa.Column('fraction_owned', sa.FLOAT(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_ownership_eia860_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name='fk_denorm_ownership_eia860_plant_id_eia_core_eia860__scd_generators'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_ownership_eia860_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_ownership_eia860_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_ownership_eia860_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('report_date', 'plant_id_eia', 'generator_id', 'owner_utility_id_eia', name='pk_denorm_ownership_eia860')
    )
    op.create_table('denorm_fuel_receipts_costs_monthly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=True),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_received_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_cost_per_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('total_fuel_cost', sa.FLOAT(), nullable=True),
    sa.Column('fuel_cost_from_eiaapi', sa.BOOLEAN(), nullable=True),
    sa.Column('sulfur_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('ash_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('mercury_content_ppm', sa.FLOAT(), nullable=True),
    sa.Column('moisture_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('chlorine_content_ppm', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name='fk_denorm_fuel_receipts_costs_monthly_eia923_plant_id_eia_core_eia__entity_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_fuel_receipts_costs_monthly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_fuel_receipts_costs_monthly_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_fuel_receipts_costs_monthly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl')
    )
    op.create_table('denorm_boiler_fuel_yearly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('boiler_id', sa.TEXT(), nullable=False),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('energy_source_code', sa.TEXT(), nullable=False),
    sa.Column('prime_mover_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_consumed_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('sulfur_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('ash_content_pct', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_boiler_fuel_yearly_eia923_energy_source_code_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id', 'report_date'], ['core_eia860__scd_boilers.plant_id_eia', 'core_eia860__scd_boilers.boiler_id', 'core_eia860__scd_boilers.report_date'], name='fk_denorm_boiler_fuel_yearly_eia923_plant_id_eia_core_eia860__scd_boilers'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_boiler_fuel_yearly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_boiler_fuel_yearly_eia923_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_boiler_fuel_yearly_eia923_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_boiler_fuel_yearly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'energy_source_code', 'prime_mover_code', 'report_date', name='pk_denorm_boiler_fuel_yearly_eia923')
    )
    op.create_table('denorm_fuel_receipts_costs_yearly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=True),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_received_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_cost_per_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('total_fuel_cost', sa.FLOAT(), nullable=True),
    sa.Column('fuel_cost_from_eiaapi', sa.BOOLEAN(), nullable=True),
    sa.Column('sulfur_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('ash_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('mercury_content_ppm', sa.FLOAT(), nullable=True),
    sa.Column('moisture_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('chlorine_content_ppm', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name='fk_denorm_fuel_receipts_costs_yearly_eia923_plant_id_eia_core_eia860__scd_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_fuel_receipts_costs_yearly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_fuel_receipts_costs_yearly_eia923_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_fuel_receipts_costs_yearly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl')
    )
    op.create_table('denorm_boiler_fuel_monthly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('boiler_id', sa.TEXT(), nullable=False),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('energy_source_code', sa.TEXT(), nullable=False),
    sa.Column('prime_mover_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_consumed_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('sulfur_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('ash_content_pct', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_boiler_fuel_monthly_eia923_energy_source_code_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id'], ['core_eia__entity_boilers.plant_id_eia', 'core_eia__entity_boilers.boiler_id'], name='fk_denorm_boiler_fuel_monthly_eia923_plant_id_eia_core_eia__entity_boilers'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_boiler_fuel_monthly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_boiler_fuel_monthly_eia923_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_boiler_fuel_monthly_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_boiler_fuel_monthly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'energy_source_code', 'prime_mover_code', 'report_date', name='pk_denorm_boiler_fuel_monthly_eia923')
    )
    op.create_table('denorm_generation_fuel_combined_monthly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('prime_mover_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_consumed_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_for_electricity_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_for_electricity_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('net_generation_mwh', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generation_fuel_combined_monthly_eia923_energy_source_code_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name='fk_denorm_generation_fuel_combined_monthly_eia923_plant_id_eia_core_eia__entity_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_generation_fuel_combined_monthly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_generation_fuel_combined_monthly_eia923_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_generation_fuel_combined_monthly_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_generation_fuel_combined_monthly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', 'prime_mover_code', 'energy_source_code', name='pk_denorm_generation_fuel_combined_monthly_eia923')
    )
    op.create_table('denorm_boilers_eia',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('boiler_id', sa.TEXT(), nullable=False),
    sa.Column('air_flow_100pct_load_cubic_feet_per_minute', sa.FLOAT(), nullable=True),
    sa.Column('boiler_fuel_code_1', sa.TEXT(), nullable=True),
    sa.Column('boiler_fuel_code_2', sa.TEXT(), nullable=True),
    sa.Column('boiler_fuel_code_3', sa.TEXT(), nullable=True),
    sa.Column('boiler_fuel_code_4', sa.TEXT(), nullable=True),
    sa.Column('boiler_manufacturer', sa.TEXT(), nullable=True),
    sa.Column('boiler_manufacturer_code', sa.TEXT(), nullable=True),
    sa.Column('boiler_operating_date', sa.DATE(), nullable=True),
    sa.Column('boiler_retirement_date', sa.DATE(), nullable=True),
    sa.Column('boiler_status', sa.TEXT(), nullable=True),
    sa.Column('boiler_type', sa.TEXT(), nullable=True),
    sa.Column('city', sa.TEXT(), nullable=True),
    sa.Column('compliance_year_mercury', sa.INTEGER(), nullable=True),
    sa.Column('compliance_year_nox', sa.INTEGER(), nullable=True),
    sa.Column('compliance_year_particulate', sa.INTEGER(), nullable=True),
    sa.Column('compliance_year_so2', sa.INTEGER(), nullable=True),
    sa.Column('county', sa.TEXT(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.Column('efficiency_100pct_load', sa.FLOAT(), nullable=True),
    sa.Column('efficiency_50pct_load', sa.FLOAT(), nullable=True),
    sa.Column('firing_rate_using_coal_tons_per_hour', sa.FLOAT(), nullable=True),
    sa.Column('firing_rate_using_gas_mcf_per_hour', sa.FLOAT(), nullable=True),
    sa.Column('firing_rate_using_oil_bbls_per_hour', sa.FLOAT(), nullable=True),
    sa.Column('firing_rate_using_other_fuels', sa.FLOAT(), nullable=True),
    sa.Column('firing_type_1', sa.TEXT(), nullable=True),
    sa.Column('firing_type_2', sa.TEXT(), nullable=True),
    sa.Column('firing_type_3', sa.TEXT(), nullable=True),
    sa.Column('fly_ash_reinjection', sa.BOOLEAN(), nullable=True),
    sa.Column('hrsg', sa.BOOLEAN(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=True),
    sa.Column('longitude', sa.FLOAT(), nullable=True),
    sa.Column('max_steam_flow_1000_lbs_per_hour', sa.FLOAT(), nullable=True),
    sa.Column('mercury_control_existing_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_existing_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_existing_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_existing_strategy_4', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_existing_strategy_5', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_existing_strategy_6', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_proposed_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_proposed_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_proposed_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('new_source_review', sa.BOOLEAN(), nullable=True),
    sa.Column('new_source_review_date', sa.DATE(), nullable=True),
    sa.Column('new_source_review_permit', sa.TEXT(), nullable=True),
    sa.Column('nox_control_existing_caaa_compliance_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('nox_control_existing_caaa_compliance_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('nox_control_existing_caaa_compliance_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('nox_control_existing_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('nox_control_existing_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('nox_control_existing_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('nox_control_manufacturer', sa.TEXT(), nullable=True),
    sa.Column('nox_control_manufacturer_code', sa.TEXT(), nullable=True),
    sa.Column('nox_control_out_of_compliance_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('nox_control_out_of_compliance_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('nox_control_out_of_compliance_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('nox_control_planned_caaa_compliance_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('nox_control_planned_caaa_compliance_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('nox_control_planned_caaa_compliance_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('nox_control_proposed_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('nox_control_proposed_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('nox_control_proposed_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('nox_control_status_code', sa.TEXT(), nullable=True),
    sa.Column('particulate_control_out_of_compliance_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('particulate_control_out_of_compliance_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('particulate_control_out_of_compliance_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('regulation_mercury', sa.TEXT(), nullable=True),
    sa.Column('regulation_nox', sa.TEXT(), nullable=True),
    sa.Column('regulation_particulate', sa.TEXT(), nullable=True),
    sa.Column('regulation_so2', sa.TEXT(), nullable=True),
    sa.Column('so2_control_existing_caaa_compliance_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('so2_control_existing_caaa_compliance_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('so2_control_existing_caaa_compliance_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('so2_control_existing_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('so2_control_existing_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('so2_control_existing_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('so2_control_out_of_compliance_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('so2_control_out_of_compliance_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('so2_control_out_of_compliance_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('so2_control_planned_caaa_compliance_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('so2_control_planned_caaa_compliance_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('so2_control_planned_caaa_compliance_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('so2_control_proposed_strategy_1', sa.TEXT(), nullable=True),
    sa.Column('so2_control_proposed_strategy_2', sa.TEXT(), nullable=True),
    sa.Column('so2_control_proposed_strategy_3', sa.TEXT(), nullable=True),
    sa.Column('standard_nox_rate', sa.FLOAT(), nullable=True),
    sa.Column('standard_particulate_rate', sa.FLOAT(), nullable=True),
    sa.Column('standard_so2_percent_scrubbed', sa.FLOAT(), nullable=True),
    sa.Column('standard_so2_rate', sa.FLOAT(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('street_address', sa.TEXT(), nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=32), nullable=True),
    sa.Column('turndown_ratio', sa.FLOAT(), nullable=True),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('unit_nox', sa.TEXT(), nullable=True),
    sa.Column('unit_particulate', sa.TEXT(), nullable=True),
    sa.Column('unit_so2', sa.TEXT(), nullable=True),
    sa.Column('waste_heat_input_mmbtu_per_hour', sa.FLOAT(), nullable=True),
    sa.Column('wet_dry_bottom', sa.TEXT(), nullable=True),
    sa.Column('zip_code', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['boiler_fuel_code_1'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_boilers_eia_boiler_fuel_code_1_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['boiler_fuel_code_2'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_boilers_eia_boiler_fuel_code_2_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['boiler_fuel_code_3'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_boilers_eia_boiler_fuel_code_3_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['boiler_fuel_code_4'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_boilers_eia_boiler_fuel_code_4_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['boiler_manufacturer_code'], ['core_eia__codes_environmental_equipment_manufacturers.code'], name='fk_denorm_boilers_eia_boiler_manufacturer_code_core_eia__codes_environmental_equipment_manufacturers'),
    sa.ForeignKeyConstraint(['boiler_status'], ['core_eia__codes_boiler_status.code'], name='fk_denorm_boilers_eia_boiler_status_core_eia__codes_boiler_status'),
    sa.ForeignKeyConstraint(['boiler_type'], ['core_eia__codes_boiler_types.code'], name='fk_denorm_boilers_eia_boiler_type_core_eia__codes_boiler_types'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_boilers_eia_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['firing_type_1'], ['core_eia__codes_firing_types.code'], name='fk_denorm_boilers_eia_firing_type_1_core_eia__codes_firing_types'),
    sa.ForeignKeyConstraint(['firing_type_2'], ['core_eia__codes_firing_types.code'], name='fk_denorm_boilers_eia_firing_type_2_core_eia__codes_firing_types'),
    sa.ForeignKeyConstraint(['firing_type_3'], ['core_eia__codes_firing_types.code'], name='fk_denorm_boilers_eia_firing_type_3_core_eia__codes_firing_types'),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_1'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_existing_strategy_1_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_2'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_existing_strategy_2_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_3'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_existing_strategy_3_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_4'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_existing_strategy_4_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_5'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_existing_strategy_5_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_existing_strategy_6'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_existing_strategy_6_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_proposed_strategy_1'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_proposed_strategy_1_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_proposed_strategy_2'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_proposed_strategy_2_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['mercury_control_proposed_strategy_3'], ['core_eia__codes_mercury_compliance_strategies.code'], name='fk_denorm_boilers_eia_mercury_control_proposed_strategy_3_core_eia__codes_mercury_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_existing_caaa_compliance_strategy_1'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_existing_caaa_compliance_strategy_1_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_existing_caaa_compliance_strategy_2'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_existing_caaa_compliance_strategy_2_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_existing_caaa_compliance_strategy_3'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_existing_caaa_compliance_strategy_3_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_manufacturer_code'], ['core_eia__codes_environmental_equipment_manufacturers.code'], name='fk_denorm_boilers_eia_nox_control_manufacturer_code_core_eia__codes_environmental_equipment_manufacturers'),
    sa.ForeignKeyConstraint(['nox_control_out_of_compliance_strategy_1'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_out_of_compliance_strategy_1_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_out_of_compliance_strategy_2'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_out_of_compliance_strategy_2_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_out_of_compliance_strategy_3'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_out_of_compliance_strategy_3_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_planned_caaa_compliance_strategy_1'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_planned_caaa_compliance_strategy_1_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_planned_caaa_compliance_strategy_2'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_planned_caaa_compliance_strategy_2_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_planned_caaa_compliance_strategy_3'], ['core_eia__codes_nox_compliance_strategies.code'], name='fk_denorm_boilers_eia_nox_control_planned_caaa_compliance_strategy_3_core_eia__codes_nox_compliance_strategies'),
    sa.ForeignKeyConstraint(['nox_control_status_code'], ['core_eia__codes_nox_control_status.code'], name='fk_denorm_boilers_eia_nox_control_status_code_core_eia__codes_nox_control_status'),
    sa.ForeignKeyConstraint(['particulate_control_out_of_compliance_strategy_1'], ['core_eia__codes_particulate_compliance_strategies.code'], name='fk_denorm_boilers_eia_particulate_control_out_of_compliance_strategy_1_core_eia__codes_particulate_compliance_strategies'),
    sa.ForeignKeyConstraint(['particulate_control_out_of_compliance_strategy_2'], ['core_eia__codes_particulate_compliance_strategies.code'], name='fk_denorm_boilers_eia_particulate_control_out_of_compliance_strategy_2_core_eia__codes_particulate_compliance_strategies'),
    sa.ForeignKeyConstraint(['particulate_control_out_of_compliance_strategy_3'], ['core_eia__codes_particulate_compliance_strategies.code'], name='fk_denorm_boilers_eia_particulate_control_out_of_compliance_strategy_3_core_eia__codes_particulate_compliance_strategies'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id', 'report_date'], ['core_eia860__scd_boilers.plant_id_eia', 'core_eia860__scd_boilers.boiler_id', 'core_eia860__scd_boilers.report_date'], name='fk_denorm_boilers_eia_plant_id_eia_core_eia860__scd_boilers'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_boilers_eia_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['regulation_mercury'], ['core_eia__codes_regulations.code'], name='fk_denorm_boilers_eia_regulation_mercury_core_eia__codes_regulations'),
    sa.ForeignKeyConstraint(['regulation_nox'], ['core_eia__codes_regulations.code'], name='fk_denorm_boilers_eia_regulation_nox_core_eia__codes_regulations'),
    sa.ForeignKeyConstraint(['regulation_particulate'], ['core_eia__codes_regulations.code'], name='fk_denorm_boilers_eia_regulation_particulate_core_eia__codes_regulations'),
    sa.ForeignKeyConstraint(['regulation_so2'], ['core_eia__codes_regulations.code'], name='fk_denorm_boilers_eia_regulation_so2_core_eia__codes_regulations'),
    sa.ForeignKeyConstraint(['so2_control_existing_caaa_compliance_strategy_1'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_existing_caaa_compliance_strategy_1_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_existing_caaa_compliance_strategy_2'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_existing_caaa_compliance_strategy_2_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_existing_caaa_compliance_strategy_3'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_existing_caaa_compliance_strategy_3_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_out_of_compliance_strategy_1'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_out_of_compliance_strategy_1_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_out_of_compliance_strategy_2'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_out_of_compliance_strategy_2_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_out_of_compliance_strategy_3'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_out_of_compliance_strategy_3_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_planned_caaa_compliance_strategy_1'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_planned_caaa_compliance_strategy_1_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_planned_caaa_compliance_strategy_2'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_planned_caaa_compliance_strategy_2_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['so2_control_planned_caaa_compliance_strategy_3'], ['core_eia__codes_so2_compliance_strategies.code'], name='fk_denorm_boilers_eia_so2_control_planned_caaa_compliance_strategy_3_core_eia__codes_so2_compliance_strategies'),
    sa.ForeignKeyConstraint(['unit_nox'], ['core_eia__codes_nox_units.code'], name='fk_denorm_boilers_eia_unit_nox_core_eia__codes_nox_units'),
    sa.ForeignKeyConstraint(['unit_particulate'], ['core_eia__codes_particulate_units.code'], name='fk_denorm_boilers_eia_unit_particulate_core_eia__codes_particulate_units'),
    sa.ForeignKeyConstraint(['unit_so2'], ['core_eia__codes_so2_units.code'], name='fk_denorm_boilers_eia_unit_so2_core_eia__codes_so2_units'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_boilers_eia_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_boilers_eia_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.ForeignKeyConstraint(['wet_dry_bottom'], ['core_eia__codes_wet_dry_bottom.code'], name='fk_denorm_boilers_eia_wet_dry_bottom_core_eia__codes_wet_dry_bottom'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'report_date', name='pk_denorm_boilers_eia')
    )
    op.create_table('denorm_plants_eia',
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('city', sa.TEXT(), nullable=True),
    sa.Column('county', sa.TEXT(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=True),
    sa.Column('longitude', sa.FLOAT(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('street_address', sa.TEXT(), nullable=True),
    sa.Column('zip_code', sa.TEXT(), nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=32), nullable=True),
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('ash_impoundment', sa.BOOLEAN(), nullable=True),
    sa.Column('ash_impoundment_lined', sa.BOOLEAN(), nullable=True),
    sa.Column('ash_impoundment_status', sa.TEXT(), nullable=True),
    sa.Column('balancing_authority_code_eia', sa.TEXT(), nullable=True),
    sa.Column('balancing_authority_name_eia', sa.TEXT(), nullable=True),
    sa.Column('datum', sa.TEXT(), nullable=True),
    sa.Column('energy_storage', sa.BOOLEAN(), nullable=True),
    sa.Column('ferc_cogen_docket_no', sa.TEXT(), nullable=True),
    sa.Column('ferc_cogen_status', sa.BOOLEAN(), nullable=True),
    sa.Column('ferc_exempt_wholesale_generator_docket_no', sa.TEXT(), nullable=True),
    sa.Column('ferc_exempt_wholesale_generator', sa.BOOLEAN(), nullable=True),
    sa.Column('ferc_small_power_producer_docket_no', sa.TEXT(), nullable=True),
    sa.Column('ferc_small_power_producer', sa.BOOLEAN(), nullable=True),
    sa.Column('ferc_qualifying_facility_docket_no', sa.TEXT(), nullable=True),
    sa.Column('grid_voltage_1_kv', sa.FLOAT(), nullable=True),
    sa.Column('grid_voltage_2_kv', sa.FLOAT(), nullable=True),
    sa.Column('grid_voltage_3_kv', sa.FLOAT(), nullable=True),
    sa.Column('iso_rto_code', sa.TEXT(), nullable=True),
    sa.Column('liquefied_natural_gas_storage', sa.BOOLEAN(), nullable=True),
    sa.Column('natural_gas_local_distribution_company', sa.TEXT(), nullable=True),
    sa.Column('natural_gas_storage', sa.BOOLEAN(), nullable=True),
    sa.Column('natural_gas_pipeline_name_1', sa.TEXT(), nullable=True),
    sa.Column('natural_gas_pipeline_name_2', sa.TEXT(), nullable=True),
    sa.Column('natural_gas_pipeline_name_3', sa.TEXT(), nullable=True),
    sa.Column('nerc_region', sa.VARCHAR(length=9), nullable=True),
    sa.Column('net_metering', sa.BOOLEAN(), nullable=True),
    sa.Column('pipeline_notes', sa.TEXT(), nullable=True),
    sa.Column('primary_purpose_id_naics', sa.INTEGER(), nullable=True),
    sa.Column('regulatory_status_code', sa.TEXT(), nullable=True),
    sa.Column('reporting_frequency_code', sa.VARCHAR(length=2), nullable=True),
    sa.Column('sector_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('sector_name_eia', sa.TEXT(), nullable=True),
    sa.Column('service_area', sa.TEXT(), nullable=True),
    sa.Column('transmission_distribution_owner_id', sa.INTEGER(), nullable=True),
    sa.Column('transmission_distribution_owner_name', sa.TEXT(), nullable=True),
    sa.Column('transmission_distribution_owner_state', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('water_source', sa.TEXT(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('balancing_authority_code_eia_consistent_rate', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia'], ['core_eia__codes_balancing_authorities.code'], name='fk_denorm_plants_eia_balancing_authority_code_eia_core_eia__codes_balancing_authorities'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_plants_eia_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name='fk_denorm_plants_eia_plant_id_eia_core_eia860__scd_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_plants_eia_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['reporting_frequency_code'], ['core_eia__codes_reporting_frequencies.code'], name='fk_denorm_plants_eia_reporting_frequency_code_core_eia__codes_reporting_frequencies'),
    sa.ForeignKeyConstraint(['sector_id_eia'], ['core_eia__codes_sector_consolidated.code'], name='fk_denorm_plants_eia_sector_id_eia_core_eia__codes_sector_consolidated'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_plants_eia_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_plants_eia_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', name='pk_denorm_plants_eia')
    )
    op.create_table('denorm_generation_fuel_combined_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_type_code_aer', sa.TEXT(), nullable=True),
    sa.Column('prime_mover_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_consumed_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_for_electricity_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_for_electricity_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('net_generation_mwh', sa.FLOAT(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_generation_fuel_combined_eia923_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generation_fuel_combined_eia923_energy_source_code_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['fuel_type_code_aer'], ['core_eia__codes_fuel_types_aer.code'], name='fk_denorm_generation_fuel_combined_eia923_fuel_type_code_aer_core_eia__codes_fuel_types_aer'),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name='fk_denorm_generation_fuel_combined_eia923_plant_id_eia_core_eia__entity_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_generation_fuel_combined_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_generation_fuel_combined_eia923_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_generation_fuel_combined_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_generation_fuel_combined_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', 'prime_mover_code', 'energy_source_code', name='pk_denorm_generation_fuel_combined_eia923')
    )
    op.create_table('denorm_generation_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('generator_id', sa.TEXT(), nullable=False),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('net_generation_mwh', sa.FLOAT(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_generation_eia923_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id'], ['core_eia__entity_generators.plant_id_eia', 'core_eia__entity_generators.generator_id'], name='fk_denorm_generation_eia923_plant_id_eia_core_eia__entity_generators'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_generation_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_generation_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_generation_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name='pk_denorm_generation_eia923')
    )
    op.create_table('denorm_generators_eia',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('generator_id', sa.TEXT(), nullable=False),
    sa.Column('associated_combined_heat_power', sa.BOOLEAN(), nullable=True),
    sa.Column('bga_source', sa.TEXT(), nullable=True),
    sa.Column('bypass_heat_recovery', sa.BOOLEAN(), nullable=True),
    sa.Column('capacity_mw', sa.FLOAT(), nullable=True),
    sa.Column('carbon_capture', sa.BOOLEAN(), nullable=True),
    sa.Column('city', sa.TEXT(), nullable=True),
    sa.Column('cofire_fuels', sa.BOOLEAN(), nullable=True),
    sa.Column('county', sa.TEXT(), nullable=True),
    sa.Column('current_planned_generator_operating_date', sa.DATE(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.Column('deliver_power_transgrid', sa.BOOLEAN(), nullable=True),
    sa.Column('distributed_generation', sa.BOOLEAN(), nullable=True),
    sa.Column('duct_burners', sa.BOOLEAN(), nullable=True),
    sa.Column('energy_source_1_transport_1', sa.TEXT(), nullable=True),
    sa.Column('energy_source_1_transport_2', sa.TEXT(), nullable=True),
    sa.Column('energy_source_1_transport_3', sa.TEXT(), nullable=True),
    sa.Column('energy_source_2_transport_1', sa.TEXT(), nullable=True),
    sa.Column('energy_source_2_transport_2', sa.TEXT(), nullable=True),
    sa.Column('energy_source_2_transport_3', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code_1', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code_2', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code_3', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code_4', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code_5', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code_6', sa.TEXT(), nullable=True),
    sa.Column('energy_storage_capacity_mwh', sa.FLOAT(), nullable=True),
    sa.Column('ferc_qualifying_facility', sa.BOOLEAN(), nullable=True),
    sa.Column('fluidized_bed_tech', sa.BOOLEAN(), nullable=True),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_type_count', sa.INTEGER(), nullable=True),
    sa.Column('generator_operating_date', sa.DATE(), nullable=True),
    sa.Column('generator_retirement_date', sa.DATE(), nullable=True),
    sa.Column('latitude', sa.FLOAT(), nullable=True),
    sa.Column('longitude', sa.FLOAT(), nullable=True),
    sa.Column('minimum_load_mw', sa.FLOAT(), nullable=True),
    sa.Column('multiple_fuels', sa.BOOLEAN(), nullable=True),
    sa.Column('nameplate_power_factor', sa.FLOAT(), nullable=True),
    sa.Column('net_capacity_mwdc', sa.FLOAT(), nullable=True),
    sa.Column('operating_switch', sa.TEXT(), nullable=True),
    sa.Column('operational_status', sa.TEXT(), nullable=True),
    sa.Column('operational_status_code', sa.TEXT(), nullable=True),
    sa.Column('original_planned_generator_operating_date', sa.DATE(), nullable=True),
    sa.Column('other_combustion_tech', sa.BOOLEAN(), nullable=True),
    sa.Column('other_modifications_date', sa.DATE(), nullable=True),
    sa.Column('other_planned_modifications', sa.BOOLEAN(), nullable=True),
    sa.Column('owned_by_non_utility', sa.BOOLEAN(), nullable=True),
    sa.Column('ownership_code', sa.TEXT(), nullable=True),
    sa.Column('planned_derate_date', sa.DATE(), nullable=True),
    sa.Column('planned_energy_source_code_1', sa.TEXT(), nullable=True),
    sa.Column('planned_generator_retirement_date', sa.DATE(), nullable=True),
    sa.Column('planned_modifications', sa.BOOLEAN(), nullable=True),
    sa.Column('planned_net_summer_capacity_derate_mw', sa.FLOAT(), nullable=True),
    sa.Column('planned_net_summer_capacity_uprate_mw', sa.FLOAT(), nullable=True),
    sa.Column('planned_net_winter_capacity_derate_mw', sa.FLOAT(), nullable=True),
    sa.Column('planned_net_winter_capacity_uprate_mw', sa.FLOAT(), nullable=True),
    sa.Column('planned_new_capacity_mw', sa.FLOAT(), nullable=True),
    sa.Column('planned_new_prime_mover_code', sa.TEXT(), nullable=True),
    sa.Column('planned_repower_date', sa.DATE(), nullable=True),
    sa.Column('planned_uprate_date', sa.DATE(), nullable=True),
    sa.Column('previously_canceled', sa.BOOLEAN(), nullable=True),
    sa.Column('prime_mover_code', sa.TEXT(), nullable=True),
    sa.Column('pulverized_coal_tech', sa.BOOLEAN(), nullable=True),
    sa.Column('reactive_power_output_mvar', sa.FLOAT(), nullable=True),
    sa.Column('rto_iso_lmp_node_id', sa.TEXT(), nullable=True),
    sa.Column('rto_iso_location_wholesale_reporting_id', sa.TEXT(), nullable=True),
    sa.Column('solid_fuel_gasification', sa.BOOLEAN(), nullable=True),
    sa.Column('startup_source_code_1', sa.TEXT(), nullable=True),
    sa.Column('startup_source_code_2', sa.TEXT(), nullable=True),
    sa.Column('startup_source_code_3', sa.TEXT(), nullable=True),
    sa.Column('startup_source_code_4', sa.TEXT(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('stoker_tech', sa.BOOLEAN(), nullable=True),
    sa.Column('street_address', sa.TEXT(), nullable=True),
    sa.Column('subcritical_tech', sa.BOOLEAN(), nullable=True),
    sa.Column('summer_capacity_estimate', sa.BOOLEAN(), nullable=True),
    sa.Column('summer_capacity_mw', sa.FLOAT(), nullable=True),
    sa.Column('summer_estimated_capability_mw', sa.FLOAT(), nullable=True),
    sa.Column('supercritical_tech', sa.BOOLEAN(), nullable=True),
    sa.Column('switch_oil_gas', sa.BOOLEAN(), nullable=True),
    sa.Column('syncronized_transmission_grid', sa.BOOLEAN(), nullable=True),
    sa.Column('technology_description', sa.TEXT(), nullable=True),
    sa.Column('time_cold_shutdown_full_load_code', sa.TEXT(), nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=32), nullable=True),
    sa.Column('topping_bottoming_code', sa.TEXT(), nullable=True),
    sa.Column('turbines_inverters_hydrokinetics', sa.INTEGER(), nullable=True),
    sa.Column('turbines_num', sa.INTEGER(), nullable=True),
    sa.Column('ultrasupercritical_tech', sa.BOOLEAN(), nullable=True),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('uprate_derate_completed_date', sa.DATE(), nullable=True),
    sa.Column('uprate_derate_during_year', sa.BOOLEAN(), nullable=True),
    sa.Column('winter_capacity_estimate', sa.BOOLEAN(), nullable=True),
    sa.Column('winter_capacity_mw', sa.FLOAT(), nullable=True),
    sa.Column('winter_estimated_capability_mw', sa.FLOAT(), nullable=True),
    sa.Column('zip_code', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_generators_eia_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['energy_source_1_transport_1'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_generators_eia_energy_source_1_transport_1_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['energy_source_1_transport_2'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_generators_eia_energy_source_1_transport_2_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['energy_source_1_transport_3'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_generators_eia_energy_source_1_transport_3_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['energy_source_2_transport_1'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_generators_eia_energy_source_2_transport_1_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['energy_source_2_transport_2'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_generators_eia_energy_source_2_transport_2_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['energy_source_2_transport_3'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_generators_eia_energy_source_2_transport_3_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['energy_source_code_1'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_energy_source_code_1_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['energy_source_code_2'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_energy_source_code_2_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['energy_source_code_3'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_energy_source_code_3_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['energy_source_code_4'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_energy_source_code_4_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['energy_source_code_5'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_energy_source_code_5_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['energy_source_code_6'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_energy_source_code_6_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['operational_status_code'], ['core_eia__codes_operational_status.code'], name='fk_denorm_generators_eia_operational_status_code_core_eia__codes_operational_status'),
    sa.ForeignKeyConstraint(['planned_energy_source_code_1'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_planned_energy_source_code_1_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['planned_new_prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_generators_eia_planned_new_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name='fk_denorm_generators_eia_plant_id_eia_core_eia860__scd_generators'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_generators_eia_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_generators_eia_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['startup_source_code_1'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_startup_source_code_1_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['startup_source_code_2'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_startup_source_code_2_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['startup_source_code_3'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_startup_source_code_3_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['startup_source_code_4'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generators_eia_startup_source_code_4_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_generators_eia_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_generators_eia_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name='pk_denorm_generators_eia')
    )
    op.create_table('denorm_utilities_eia',
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('street_address', sa.TEXT(), nullable=True),
    sa.Column('city', sa.TEXT(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('zip_code', sa.TEXT(), nullable=True),
    sa.Column('plants_reported_owner', sa.BOOLEAN(), nullable=True),
    sa.Column('plants_reported_operator', sa.BOOLEAN(), nullable=True),
    sa.Column('plants_reported_asset_manager', sa.BOOLEAN(), nullable=True),
    sa.Column('plants_reported_other_relationship', sa.BOOLEAN(), nullable=True),
    sa.Column('entity_type', sa.TEXT(), nullable=True),
    sa.Column('attention_line', sa.TEXT(), nullable=True),
    sa.Column('address_2', sa.TEXT(), nullable=True),
    sa.Column('zip_code_4', sa.TEXT(), nullable=True),
    sa.Column('contact_firstname', sa.TEXT(), nullable=True),
    sa.Column('contact_lastname', sa.TEXT(), nullable=True),
    sa.Column('contact_title', sa.TEXT(), nullable=True),
    sa.Column('phone_number', sa.TEXT(), nullable=True),
    sa.Column('phone_extension', sa.TEXT(), nullable=True),
    sa.Column('contact_firstname_2', sa.TEXT(), nullable=True),
    sa.Column('contact_lastname_2', sa.TEXT(), nullable=True),
    sa.Column('contact_title_2', sa.TEXT(), nullable=True),
    sa.Column('phone_number_2', sa.TEXT(), nullable=True),
    sa.Column('phone_extension_2', sa.TEXT(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_utilities_eia_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_utilities_eia_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_utilities_eia_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('utility_id_eia', 'report_date', name='pk_denorm_utilities_eia')
    )
    op.create_table('denorm_generation_yearly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('generator_id', sa.TEXT(), nullable=False),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('net_generation_mwh', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id', 'report_date'], ['core_eia860__scd_generators.plant_id_eia', 'core_eia860__scd_generators.generator_id', 'core_eia860__scd_generators.report_date'], name='fk_denorm_generation_yearly_eia923_plant_id_eia_core_eia860__scd_generators'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_generation_yearly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_generation_yearly_eia923_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_generation_yearly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name='pk_denorm_generation_yearly_eia923')
    )
    op.create_table('denorm_generation_fuel_combined_yearly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('energy_source_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('prime_mover_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_consumed_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_for_electricity_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_for_electricity_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('net_generation_mwh', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_generation_fuel_combined_yearly_eia923_energy_source_code_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name='fk_denorm_generation_fuel_combined_yearly_eia923_plant_id_eia_core_eia860__scd_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_generation_fuel_combined_yearly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_generation_fuel_combined_yearly_eia923_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_generation_fuel_combined_yearly_eia923_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_generation_fuel_combined_yearly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'report_date', 'prime_mover_code', 'energy_source_code', name='pk_denorm_generation_fuel_combined_yearly_eia923')
    )
    op.create_table('denorm_emissions_control_equipment_eia860',
    sa.Column('report_year', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('emission_control_id_pudl', sa.FLOAT(), nullable=False),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.Column('emission_control_equipment_type_code', sa.TEXT(), nullable=True),
    sa.Column('operational_status_code', sa.TEXT(), nullable=True),
    sa.Column('operational_status', sa.TEXT(), nullable=True),
    sa.Column('mercury_control_id_eia', sa.TEXT(), nullable=True),
    sa.Column('nox_control_id_eia', sa.TEXT(), nullable=True),
    sa.Column('particulate_control_id_eia', sa.TEXT(), nullable=True),
    sa.Column('so2_control_id_eia', sa.TEXT(), nullable=True),
    sa.Column('acid_gas_control', sa.BOOLEAN(), nullable=True),
    sa.Column('emission_control_equipment_cost', sa.FLOAT(), nullable=True),
    sa.Column('emission_control_operating_date', sa.DATE(), nullable=True),
    sa.Column('emission_control_retirement_date', sa.DATE(), nullable=True),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_emissions_control_equipment_eia860_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['emission_control_equipment_type_code'], ['core_eia__codes_emission_control_equipment_types.code'], name='fk_denorm_emissions_control_equipment_eia860_emission_control_equipment_type_code_core_eia__codes_emission_control_equipment_types'),
    sa.ForeignKeyConstraint(['operational_status_code'], ['core_eia__codes_operational_status.code'], name='fk_denorm_emissions_control_equipment_eia860_operational_status_code_core_eia__codes_operational_status'),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name='fk_denorm_emissions_control_equipment_eia860_plant_id_eia_core_eia__entity_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_emissions_control_equipment_eia860_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_emissions_control_equipment_eia860_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_emissions_control_equipment_eia860_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('report_year', 'plant_id_eia', 'emission_control_id_pudl', name='pk_denorm_emissions_control_equipment_eia860')
    )
    op.create_table('denorm_boiler_fuel_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('boiler_id', sa.TEXT(), nullable=False),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('energy_source_code', sa.TEXT(), nullable=False),
    sa.Column('prime_mover_code', sa.TEXT(), nullable=False),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_consumed_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('sulfur_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('ash_content_pct', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_boiler_fuel_eia923_energy_source_code_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'boiler_id'], ['core_eia__entity_boilers.plant_id_eia', 'core_eia__entity_boilers.boiler_id'], name='fk_denorm_boiler_fuel_eia923_plant_id_eia_core_eia__entity_boilers'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_boiler_fuel_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['prime_mover_code'], ['core_eia__codes_prime_movers.code'], name='fk_denorm_boiler_fuel_eia923_prime_mover_code_core_eia__codes_prime_movers'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_boiler_fuel_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_boiler_fuel_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'boiler_id', 'energy_source_code', 'prime_mover_code', 'report_date', name='pk_denorm_boiler_fuel_eia923')
    )
    op.create_table('denorm_plants_utilities_eia',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia', 'report_date'], ['core_eia860__scd_plants.plant_id_eia', 'core_eia860__scd_plants.report_date'], name='fk_denorm_plants_utilities_eia_plant_id_eia_core_eia860__scd_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_plants_utilities_eia_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia', 'report_date'], ['core_eia860__scd_utilities.utility_id_eia', 'core_eia860__scd_utilities.report_date'], name='fk_denorm_plants_utilities_eia_utility_id_eia_core_eia860__scd_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_plants_utilities_eia_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('report_date', 'plant_id_eia', 'utility_id_eia', name='pk_denorm_plants_utilities_eia')
    )
    op.create_table('denorm_fuel_receipts_costs_eia923',
    sa.Column('report_date', sa.DATE(), nullable=True),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('state', sa.TEXT(), nullable=True),
    sa.Column('contract_type_code', sa.VARCHAR(length=2), nullable=True),
    sa.Column('contract_expiration_date', sa.DATE(), nullable=True),
    sa.Column('energy_source_code', sa.TEXT(), nullable=True),
    sa.Column('fuel_type_code_pudl', sa.VARCHAR(length=7), nullable=True),
    sa.Column('fuel_group_code', sa.VARCHAR(length=14), nullable=True),
    sa.Column('supplier_name', sa.TEXT(), nullable=True),
    sa.Column('fuel_received_units', sa.FLOAT(), nullable=True),
    sa.Column('fuel_mmbtu_per_unit', sa.FLOAT(), nullable=True),
    sa.Column('fuel_cost_per_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('bulk_agg_fuel_cost_per_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('fuel_consumed_mmbtu', sa.FLOAT(), nullable=True),
    sa.Column('total_fuel_cost', sa.FLOAT(), nullable=True),
    sa.Column('fuel_cost_from_eiaapi', sa.BOOLEAN(), nullable=True),
    sa.Column('sulfur_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('ash_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('mercury_content_ppm', sa.FLOAT(), nullable=True),
    sa.Column('primary_transportation_mode_code', sa.TEXT(), nullable=True),
    sa.Column('secondary_transportation_mode_code', sa.TEXT(), nullable=True),
    sa.Column('natural_gas_transport_code', sa.VARCHAR(length=13), nullable=True),
    sa.Column('natural_gas_delivery_contract_type_code', sa.VARCHAR(length=13), nullable=True),
    sa.Column('moisture_content_pct', sa.FLOAT(), nullable=True),
    sa.Column('chlorine_content_ppm', sa.FLOAT(), nullable=True),
    sa.Column('data_maturity', sa.TEXT(), nullable=True),
    sa.Column('mine_id_msha', sa.INTEGER(), nullable=True),
    sa.Column('mine_name', sa.TEXT(), nullable=True),
    sa.Column('mine_state', sa.TEXT(), nullable=True),
    sa.Column('coalmine_county_id_fips', sa.TEXT(), nullable=True),
    sa.Column('mine_type_code', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['contract_type_code'], ['core_eia__codes_contract_types.code'], name='fk_denorm_fuel_receipts_costs_eia923_contract_type_code_core_eia__codes_contract_types'),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name='fk_denorm_fuel_receipts_costs_eia923_data_maturity_core_pudl__codes_data_maturities'),
    sa.ForeignKeyConstraint(['energy_source_code'], ['core_eia__codes_energy_sources.code'], name='fk_denorm_fuel_receipts_costs_eia923_energy_source_code_core_eia__codes_energy_sources'),
    sa.ForeignKeyConstraint(['mine_type_code'], ['core_eia__codes_coalmine_types.code'], name='fk_denorm_fuel_receipts_costs_eia923_mine_type_code_core_eia__codes_coalmine_types'),
    sa.ForeignKeyConstraint(['plant_id_eia'], ['core_eia__entity_plants.plant_id_eia'], name='fk_denorm_fuel_receipts_costs_eia923_plant_id_eia_core_eia__entity_plants'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_fuel_receipts_costs_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['primary_transportation_mode_code'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_fuel_receipts_costs_eia923_primary_transportation_mode_code_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['secondary_transportation_mode_code'], ['core_eia__codes_fuel_transportation_modes.code'], name='fk_denorm_fuel_receipts_costs_eia923_secondary_transportation_mode_code_core_eia__codes_fuel_transportation_modes'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_fuel_receipts_costs_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_fuel_receipts_costs_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl')
    )
    op.create_table('denorm_generation_monthly_eia923',
    sa.Column('report_date', sa.DATE(), nullable=False),
    sa.Column('plant_id_eia', sa.INTEGER(), nullable=False),
    sa.Column('plant_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('plant_name_eia', sa.TEXT(), nullable=True),
    sa.Column('utility_id_eia', sa.INTEGER(), nullable=True),
    sa.Column('utility_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('utility_name_eia', sa.TEXT(), nullable=True),
    sa.Column('generator_id', sa.TEXT(), nullable=False),
    sa.Column('unit_id_pudl', sa.INTEGER(), nullable=True),
    sa.Column('net_generation_mwh', sa.FLOAT(), nullable=True),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id'], ['core_eia__entity_generators.plant_id_eia', 'core_eia__entity_generators.generator_id'], name='fk_denorm_generation_monthly_eia923_plant_id_eia_core_eia__entity_generators'),
    sa.ForeignKeyConstraint(['plant_id_pudl'], ['core_pudl__entity_plants_pudl.plant_id_pudl'], name='fk_denorm_generation_monthly_eia923_plant_id_pudl_core_pudl__entity_plants_pudl'),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name='fk_denorm_generation_monthly_eia923_utility_id_eia_core_eia__entity_utilities'),
    sa.ForeignKeyConstraint(['utility_id_pudl'], ['core_pudl__entity_utilities_pudl.utility_id_pudl'], name='fk_denorm_generation_monthly_eia923_utility_id_pudl_core_pudl__entity_utilities_pudl'),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', 'report_date', name='pk_denorm_generation_monthly_eia923')
    )
    op.drop_table('out_eia__yearly_generators')
    op.drop_table('out_eia__yearly_boilers')
    op.drop_table('out_eia923__yearly_generation')
    op.drop_table('out_eia923__yearly_boiler_fuel')
    op.drop_table('out_eia860__yearly_ownership')
    op.drop_table('out_eia__yearly_plants')
    op.drop_table('out_eia923__yearly_generation_fuel_combined')
    op.drop_table('out_eia923__yearly_fuel_receipts_costs')
    op.drop_table('_out_eia__plants_utilities')
    op.drop_table('out_eia__yearly_utilities')
    op.drop_table('out_eia923__monthly_generation')
    op.drop_table('out_eia923__monthly_boiler_fuel')
    op.drop_table('out_eia923__generation')
    op.drop_table('out_eia923__boiler_fuel')
    op.drop_table('out_eia923__monthly_generation_fuel_combined')
    op.drop_table('out_eia923__monthly_fuel_receipts_costs')
    op.drop_table('out_eia923__generation_fuel_combined')
    op.drop_table('out_eia923__fuel_receipts_costs')
    op.drop_table('out_eia860__yearly_emissions_control_equipment')
    # ### end Alembic commands ###
