"""Add gridpathratoolkit tables

Revision ID: 370f64f0b26c
Revises: 5d043449e9e1
Create Date: 2024-03-28 18:32:18.353523

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = '370f64f0b26c'
down_revision = '5d043449e9e1'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('core_gridpathratoolkit__hourly_aggregated_extended_capacity_factors',
    sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Date and time converted to Coordinated Universal Time (UTC).'),
    sa.Column('aggregation_key', sa.Text(), nullable=False, comment='A key that indicates on what basis the associated data was aggregated.'),
    sa.Column('capacity_factor', sa.Float(), nullable=True, comment='Fraction of potential generation that was actually reported for a plant part.'),
    sa.PrimaryKeyConstraint('datetime_utc', 'aggregation_key', name=op.f('pk_core_gridpathratoolkit__hourly_aggregated_extended_capacity_factors'))
    )
    op.create_table('core_gridpathratoolkit__capacity_factor_aggregations',
    sa.Column('plant_id_eia', sa.Integer(), nullable=False, comment='The unique six-digit facility identification number, also called an ORISPL, assigned by the Energy Information Administration.'),
    sa.Column('generator_id', sa.Text(), nullable=False, comment='Generator ID is usually numeric, but sometimes includes letters. Make sure you treat it as a string!'),
    sa.Column('aggregation_key', sa.Text(), nullable=True, comment='A key that indicates on what basis the associated data was aggregated.'),
    sa.Column('capacity_mw', sa.Float(), nullable=True, comment='Total installed (nameplate) capacity, in megawatts.'),
    sa.Column('include_generator', sa.Boolean(), nullable=True, comment='Indicates whether a generator is included in the generation profile aggregation.'),
    sa.ForeignKeyConstraint(['plant_id_eia', 'generator_id'], ['core_eia__entity_generators.plant_id_eia', 'core_eia__entity_generators.generator_id'], name=op.f('fk_core_gridpathratoolkit__capacity_factor_aggregations_plant_id_eia_core_eia__entity_generators')),
    sa.PrimaryKeyConstraint('plant_id_eia', 'generator_id', name=op.f('pk_core_gridpathratoolkit__capacity_factor_aggregations'))
    )
    with op.batch_alter_table('core_pudl__codes_datasources', schema=None) as batch_op:
        batch_op.alter_column('datasource',
               existing_type=sa.VARCHAR(length=14),
               type_=sa.Enum('censusdp1tract', 'eia176', 'eia191', 'eia757a', 'eia860', 'eia860m', 'eia861', 'eia923', 'eia930', 'eiaaeo', 'eia_bulk_elec', 'eiawater', 'epacems', 'epacamd_eia', 'ferc1', 'ferc2', 'ferc6', 'ferc60', 'ferc714', 'ferceqr', 'gridpathratoolkit', 'mshamines', 'nrelatb', 'phmsagas', 'pudl', 'sec10k'),
               existing_nullable=False)

    with op.batch_alter_table('out_ferc714__hourly_estimated_state_demand', schema=None) as batch_op:
        batch_op.add_column(sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Date and time converted to Coordinated Universal Time (UTC).'))
        batch_op.drop_column('utc_datetime')

    with op.batch_alter_table('out_ferc714__hourly_planning_area_demand', schema=None) as batch_op:
        batch_op.add_column(sa.Column('datetime_utc', sqlite.DATETIME(), nullable=False, comment='Date and time converted to Coordinated Universal Time (UTC).'))
        batch_op.drop_column('utc_datetime')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('out_ferc714__hourly_planning_area_demand', schema=None) as batch_op:
        batch_op.add_column(sa.Column('utc_datetime', sa.DATETIME(), nullable=False))
        batch_op.drop_column('datetime_utc')

    with op.batch_alter_table('out_ferc714__hourly_estimated_state_demand', schema=None) as batch_op:
        batch_op.add_column(sa.Column('utc_datetime', sa.DATETIME(), nullable=False))
        batch_op.drop_column('datetime_utc')

    with op.batch_alter_table('core_pudl__codes_datasources', schema=None) as batch_op:
        batch_op.alter_column('datasource',
               existing_type=sa.Enum('censusdp1tract', 'eia176', 'eia191', 'eia757a', 'eia860', 'eia860m', 'eia861', 'eia923', 'eia930', 'eiaaeo', 'eia_bulk_elec', 'eiawater', 'epacems', 'epacamd_eia', 'ferc1', 'ferc2', 'ferc6', 'ferc60', 'ferc714', 'ferceqr', 'gridpathratoolkit', 'mshamines', 'nrelatb', 'phmsagas', 'pudl', 'sec10k'),
               type_=sa.VARCHAR(length=14),
               existing_nullable=False)

    op.drop_table('core_gridpathratoolkit__capacity_factor_aggregations')
    op.drop_table('core_gridpathratoolkit__hourly_aggregated_extended_capacity_factors')
    # ### end Alembic commands ###
