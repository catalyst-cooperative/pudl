"""Add EIA861 short_form table and update column names in 860

Revision ID: 827e88186933
Revises: 6dcb5e3e07dd
Create Date: 2024-05-23 15:33:28.522903

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '827e88186933'
down_revision = '6dcb5e3e07dd'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('core_eia861__yearly_short_form',
    sa.Column('report_date', sa.Date(), nullable=False, comment='Date reported.'),
    sa.Column('utility_id_eia', sa.Integer(), nullable=False, comment='The EIA Utility Identification number.'),
    sa.Column('utility_name_eia', sa.Text(), nullable=True, comment='The name of the utility.'),
    sa.Column('entity_type', sa.Text(), nullable=True, comment='Entity type of principal owner.'),
    sa.Column('state', sa.Text(), nullable=False, comment='Two letter US state abbreviation.'),
    sa.Column('balancing_authority_code_eia', sa.Text(), nullable=False, comment='EIA short code identifying a balancing authority. May include Canadian and Mexican BAs.'),
    sa.Column('sales_revenue', sa.Float(), nullable=True, comment='Revenue from electricity sold.'),
    sa.Column('sales_mwh', sa.Float(), nullable=True, comment='Quantity of electricity sold in MWh.'),
    sa.Column('customers', sa.Float(), nullable=True, comment='Number of customers.'),
    sa.Column('num_water_heaters', sa.Integer(), nullable=True, comment="The number of grid-enabled water heaters added to the respondent's program this year - if the respondent has DSM program for grid-enabled water heaters (as defined by DOE’s Office of Energy Efficiency and Renewable Energy)."),
    sa.Column('has_net_metering', sa.Boolean(), nullable=True, comment='Whether the plant has a net metering agreement in effect during the reporting year.  (Only displayed for facilities that report the sun or wind as an energy source). This field was only reported up until 2015'),
    sa.Column('has_demand_side_management', sa.Boolean(), nullable=True, comment='Whether there were strategies or measures used to control electricity demand by customers'),
    sa.Column('has_time_responsive_programs', sa.Boolean(), nullable=True, comment='Whether the respondent operates any time-based rate programs (e.g., real-time pricing, critical peak pricing, variable peak pricing and time-of-use rates administered through a tariff).'),
    sa.Column('has_green_pricing', sa.Boolean(), nullable=True, comment='Whether a green pricing program was associated with this utility during the reporting year.'),
    sa.Column('data_maturity', sa.Text(), nullable=True, comment='Level of maturity of the data record. Some data sources report less-than-final data. PUDL sometimes includes this data, but use at your own risk.'),
    sa.ForeignKeyConstraint(['balancing_authority_code_eia'], ['core_eia__codes_balancing_authorities.code'], name=op.f('fk_core_eia861__yearly_short_form_balancing_authority_code_eia_core_eia__codes_balancing_authorities')),
    sa.ForeignKeyConstraint(['data_maturity'], ['core_pudl__codes_data_maturities.code'], name=op.f('fk_core_eia861__yearly_short_form_data_maturity_core_pudl__codes_data_maturities')),
    sa.ForeignKeyConstraint(['utility_id_eia'], ['core_eia__entity_utilities.utility_id_eia'], name=op.f('fk_core_eia861__yearly_short_form_utility_id_eia_core_eia__entity_utilities')),
    sa.PrimaryKeyConstraint('utility_id_eia', 'state', 'report_date', 'balancing_authority_code_eia', name=op.f('pk_core_eia861__yearly_short_form'))
    )
    with op.batch_alter_table('core_eia860__scd_plants', schema=None) as batch_op:
        batch_op.add_column(sa.Column('has_net_metering', sa.Boolean(), nullable=True, comment='Whether the plant has a net metering agreement in effect during the reporting year.  (Only displayed for facilities that report the sun or wind as an energy source). This field was only reported up until 2015'))
        batch_op.drop_column('net_metering')

    with op.batch_alter_table('core_eia861__yearly_demand_response_water_heater', schema=None) as batch_op:
        batch_op.add_column(sa.Column('num_water_heaters', sa.Integer(), nullable=True, comment="The number of grid-enabled water heaters added to the respondent's program this year - if the respondent has DSM program for grid-enabled water heaters (as defined by DOE’s Office of Energy Efficiency and Renewable Energy)."))
        batch_op.drop_column('water_heater')

    with op.batch_alter_table('core_eia861__yearly_demand_side_management_misc', schema=None) as batch_op:
        batch_op.add_column(sa.Column('has_time_responsive_programs', sa.Boolean(), nullable=True, comment='Whether the respondent operates any time-based rate programs (e.g., real-time pricing, critical peak pricing, variable peak pricing and time-of-use rates administered through a tariff).'))
        batch_op.drop_column('time_responsive_programs')

    with op.batch_alter_table('out_eia__yearly_plants', schema=None) as batch_op:
        batch_op.add_column(sa.Column('has_net_metering', sa.Boolean(), nullable=True, comment='Whether the plant has a net metering agreement in effect during the reporting year.  (Only displayed for facilities that report the sun or wind as an energy source). This field was only reported up until 2015'))
        batch_op.drop_column('net_metering')

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('out_eia__yearly_plants', schema=None) as batch_op:
        batch_op.add_column(sa.Column('net_metering', sa.BOOLEAN(), nullable=True))
        batch_op.drop_column('has_net_metering')

    with op.batch_alter_table('core_eia861__yearly_demand_side_management_misc', schema=None) as batch_op:
        batch_op.add_column(sa.Column('time_responsive_programs', sa.BOOLEAN(), nullable=True))
        batch_op.drop_column('has_time_responsive_programs')

    with op.batch_alter_table('core_eia861__yearly_demand_response_water_heater', schema=None) as batch_op:
        batch_op.add_column(sa.Column('water_heater', sa.INTEGER(), nullable=True))
        batch_op.drop_column('num_water_heaters')

    with op.batch_alter_table('core_eia860__scd_plants', schema=None) as batch_op:
        batch_op.add_column(sa.Column('net_metering', sa.BOOLEAN(), nullable=True))
        batch_op.drop_column('has_net_metering')

    op.drop_table('core_eia861__yearly_short_form')
    # ### end Alembic commands ###
