[tox]
envlist = ci

[testenv]
allowlist_externals =
    bash
    coverage
    sphinx-build
    twine
# shared directory for re-used packages
envdir = {toxinidir}/.env_tox
passenv =
    CI
    CLOUDSDK_*
    CONDA_PREFIX
    DAGSTER_HOME
    GITHUB_*
    GOOGLE_*
    GCLOUD_*
    GCP_*
    HOME
    PUDL_INPUT
    PUDL_OUTPUT
    SQLALCHEMY_WARN_20
covargs = --cov={envsitepackagesdir}/pudl --cov-report=xml
covreport = coverage report --sort=cover

###########################################################################
# Code and Documentation Linters
###########################################################################
[testenv:flake8]
description = Run the full suite of flake8 linters on the PUDL codebase.
skip_install = false
extras =
    test
commands =
    flake8 --config tox.ini

[testenv:pre_commit]
description = Run git pre-commit hooks not covered by the other linters.
skip_install = false
extras =
    test
commands =
    pre-commit run --all-files --show-diff-on-failure python-no-eval
    pre-commit run --all-files --show-diff-on-failure python-no-log-warn
    pre-commit run --all-files --show-diff-on-failure python-check-blanket-noqa
    pre-commit run --all-files --show-diff-on-failure check-merge-conflict
    pre-commit run --all-files --show-diff-on-failure check-yaml
    pre-commit run --all-files --show-diff-on-failure check-case-conflict
    pre-commit run --all-files --show-diff-on-failure debug-statements
    pre-commit run --all-files --show-diff-on-failure name-tests-test

[testenv:bandit]
description = Check the PUDL codebase for common insecure code patterns.
skip_install = false
extras =
    test
commands =
    bandit -r src/pudl/ -c .bandit.yml

[testenv:rstcheck]
description = Check formatting and syntax of RST files.
skip_install = false
extras =
    test
commands =
    rstcheck --config tox.ini --recursive ./

[testenv:linters]
description = Run the pre-commit, flake8 and bandit linters.
skip_install = false
extras =
    {[testenv:pre_commit]extras}
    {[testenv:bandit]extras}
    {[testenv:flake8]extras}
    {[testenv:rstcheck]extras}
commands =
    {[testenv:pre_commit]commands}
    {[testenv:bandit]commands}
    {[testenv:flake8]commands}
    {[testenv:rstcheck]commands}

###########################################################################
# Lint and Build the Docs
###########################################################################
[testenv:doc8]
description = Check the documentation input files for syntactical correctness.
skip_install = false
extras =
    doc
commands =
    doc8 docs/ README.rst

[testenv:docs]
description = Build the PUDL HTML docs from scratch using Sphinx.
skip_install = false
extras =
    test
    {[testenv:doc8]extras}
    {[testenv:rstcheck]extras}
commands =
    coverage erase
    bash -c 'rm -rf docs/_build'
    {[testenv:doc8]commands}
    {[testenv:rstcheck]commands}
    bash -c 'coverage run --source={envsitepackagesdir}/pudl -- $(which sphinx-build) -W -b html docs docs/_build/html'
    coverage xml


###########################################################################
# Test the code and validate data
###########################################################################
[testenv:unit]
description = Run all the software unit tests.
extras =
    test
commands =
    pytest {tty:--color=yes} {posargs} {[testenv]covargs} \
      --doctest-modules {envsitepackagesdir}/pudl \
      test/unit

[testenv:integration]
description = Run all software integration tests and process a full year of data.
extras =
    test
    datasette
commands =
    pytest {tty:--color=yes}  {posargs} {[testenv]covargs} test/integration

[testenv:minmax_rows]
description = Check that all outputs have the expected number of rows.
skip_install = false
recreate = true
extras =
    test
commands =
    pytest {tty:--color=yes} --live-dbs \
      test/validate/epacamd_eia_test.py::test_minmax_rows \
      test/validate/ferc1_test.py::test_minmax_rows \
      test/validate/eia_test.py::test_minmax_rows \
      test/validate/mcoe_test.py::test_minmax_rows_mcoe

[testenv:validate]
description = Run all data validation tests. This requires a complete PUDL DB.
skip_install = false
recreate = true
extras =
    test
commands =
    pytest {tty:--color=yes} --live-dbs test/validate

[testenv:jupyter]
description = Run all data validation tests. This requires a complete PUDL DB.
skip_install = false
recreate = true
extras =
    test
commands =
    pytest {tty:--color=yes} --live-dbs test/integration/jupyter_notebooks_test.py

[testenv:ci]
description = Run all continuous integration (CI) checks & generate test coverage.
skip_install = false
recreate = true
extras =
    {[testenv:docs]extras}
    {[testenv:integration]extras}
    {[testenv:linters]extras}
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:docs]commands}
    {[testenv:unit]commands}
    {[testenv:integration]commands}
    {[testenv]covreport}

[testenv:ferc1_schema]
description = Verify FERC Form 1 DB schema are compatible for all years.
skip_install = false
extras =
    {[testenv:integration]extras}
commands =
    pytest {tty:--color=yes} {posargs} {[testenv]covargs} \
      --etl-settings src/pudl/package_data/settings/etl_full.yml \
      test/integration/etl_test.py::test_ferc1_schema

[testenv:full_integration]
description = Run ETL and integration tests for all years and data sources.
skip_install = false
extras =
    {[testenv:integration]extras}
commands =
    pytest {tty:--color=yes} {posargs} {[testenv]covargs} \
      --etl-settings src/pudl/package_data/settings/etl_full.yml \
      test/integration

[testenv:full]
description = Run all CI checks, but for all years of data.
skip_install = false
recreate = true
extras =
    {[testenv:docs]extras}
    {[testenv:integration]extras}
    {[testenv:linters]extras}
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:docs]commands}
    {[testenv:unit]commands}
    {[testenv:ferc1_schema]commands}
    {[testenv:full_integration]commands}
    {[testenv]covreport}

[testenv:nuke]
description = Nuke & recreate SQLite & Parquet outputs, then run all tests and data validations against the new outputs.
skip_install = false
recreate = true
extras =
    {[testenv:docs]extras}
    {[testenv:integration]extras}
    {[testenv:linters]extras}
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:docs]commands}
    {[testenv:unit]commands}
    {[testenv:ferc1_schema]commands}
    {[testenv:integration]commands}
    bash -c 'rm -f tox-nuke.log'
    bash -c 'coverage run --append src/pudl/convert/ferc_to_sqlite.py --logfile tox-nuke.log --clobber src/pudl/package_data/settings/etl_full.yml'
    bash -c 'coverage run --append src/pudl/cli/etl.py --logfile tox-nuke.log --clobber src/pudl/package_data/settings/etl_full.yml'
    pytest {tty:--color=yes} --live-dbs {posargs} {[testenv]covargs} \
      --etl-settings src/pudl/package_data/settings/etl_full.yml \
      test/integration
    {[testenv:validate]commands}
    {[testenv]covreport}

###########################################################################
# Generate and save the unmapped IDs
###########################################################################
[testenv:get_unmapped_ids]
description = Make the raw FERC1 DB and generate a PUDL database with only EIA in order to generate any unmapped IDs.
skip_install = false
extras =
    {[testenv:integration]extras}
commands =
    pytest {tty:--color=yes} {posargs} \
      --save-unmapped-ids \
      --ignore-foreign-key-constraints \
      --etl-settings src/pudl/package_data/settings/etl_full.yml \
      test/integration/glue_test.py

###########################################################################
# Software Package Build & Release
###########################################################################
[testenv:build]
description = Prepare Python source and binary packages for release.
basepython = python3
skip_install = false
extras =
    dev
commands =
    bash -c 'rm -rf build/* dist/* src/catalystcoop.pudl.egg-info'
    python -m build

[testenv:testrelease]
description = Do a dry run of Python package release using the PyPI test server.
basepython = python3
skip_install = false
extras =
    dev
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --repository testpypi --skip-existing dist/*

[testenv:release]
description = Release the PUDL package to the production PyPI server.
basepython = python3
skip_install = true
extras =
    dev
commands =
    {[testenv:build]commands}
    twine check dist/*
    twine upload --sign --verbose --skip-existing dist/*

###########################################################################
# Configuration for various tools.
###########################################################################
[pytest]
testpaths = .
addopts = --verbose --pdbcls=IPython.terminal.debugger:TerminalPdb
log_format = %(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s
log_date_format= %Y-%m-%d %H:%M:%S
log_cli = true
log_cli_level = debug
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS
filterwarnings =
    ignore:distutils Version classes are deprecated:DeprecationWarning
    ignore:The Shapely GEOS version:UserWarning:geopandas[.*]
    ignore:Unknown extension:UserWarning:openpyxl.worksheet[.*]
    ignore:In a future version, the Index constructor:FutureWarning:pandas.core.reshape.merge
    ignore:Feature names only support names:FutureWarning:sklearn.utils.validation
    ignore:Integration of FERC 714:UserWarning:pudl.extract.ferc714
    ignore:Integration of EIA 861:UserWarning:pudl.extract.eia861
    once:In a future version:FutureWarning:pudl.helpers
[flake8]
# A few linter errors and warnings that we are currently ignoring:
# * W503, W504: Line break before / after binary operator.
# * D401: Imperative mood.
# * E501: Overlong line
# * E203: Space before ':' (black recommends to ignore)
# * RST201, RST203, RST301: Google docstrings aren't RST until have been processed by
#   Napoleon See https://github.com/peterjc/flake8-rst-docstrings/issues/17
extend-ignore = W503,W504,D401,E501,E203,RST201,RST203,RST301
inline-quotes = double
docstring-convention = google
max-line-length = 88
# Files and directories that should be subject to linting
extend-exclude =
    package_data,
    .env_tox,
    .env_pudl,
    .eggs,
    ./build,
    ./venv,
    .ipynb_checkpoints,
    ./migrations,
# We have a backlog of complex functions being skipped with noqa: C901
max-complexity = 10
format = %(cyan)s%(path)s%(reset)s:%(green)s%(row)-4d%(reset)s %(red)s%(bold)s%(code)s%(reset)s %(text)s
rst-roles =
    attr,
    class,
    doc,
    download
    func,
    issue,
    meth,
    mod,
    obj,
    pr,
    py:const,
    ref,
    user,
rst-directives =
    envvar,
    exception,
percent-greedy = 2
format-greedy = 2
classmethod-decorators =
    classmethod,
    validator,
    root_validator

per-file-ignores =
    test/*: D
    migrations/*: D

[doc8]
max-line-length = 88
ignore-path =
    docs/ferc/form1
    docs/_build

[rstcheck]
report_level = warning
ignore_roles = pr,issue,user,download
ignore_messages = (Hyperlink target ".*" is not referenced\.$|Duplicate implicit target name:)
ignore_directives = bibliography,todo
