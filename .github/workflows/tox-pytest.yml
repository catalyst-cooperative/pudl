name: tox-pytest

on: [ push, pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2.4.0
      with:
        fetch-depth: 2

    - name: Set up conda environment for testing
      uses: conda-incubator/setup-miniconda@v2.1.1
      with:
        mamba-version: "*"
        channels: conda-forge,defaults
        channel-priority: true
        python-version: ${{ matrix.python-version }}
        activate-environment: pudl-test
        environment-file: devtools/ci-environment.yml
    - shell: bash -l {0}
      run: |
        conda info
        conda list
        conda config --show-sources
        conda config --show
        printenv | sort

    - name: Compile Zenodo datastore DOIs for cache invalidation
      run: grep -e '.*10\.\(5281\|5072\)/zenodo\..*' src/pudl/workspace/datastore.py | sed -e 's/",*$//g' | sed -e 's/^.*"//g' | sort > datastore-dois.txt

    - name: Restore Zenodo datastore from cache if possible
      uses: actions/cache@v2.1.7
      id: cache-zenodo-datastore
      with:
        path: ~/pudl-work/data/
        key: zenodo-datastore-${{ hashFiles('datastore-dois.txt') }}
        restore-keys: |
          zenodo-datastore-

    - name: Log pre-test Zenodo datastore contents
      run: |
        mkdir -p ~/pudl-work/data/
        find ~/pudl-work/data/

    - name: Log SQLite3 version
      run: |
        conda run -n pudl-test which sqlite3
        conda run -n pudl-test sqlite3 --version

    - name: Run PyTest with Tox
      env:
        API_KEY_EIA: ${{ secrets.API_KEY_EIA }}
      run: |
        conda run -n pudl-test tox -e unit

    - name: Log post-test Zenodo datastore contents
      run: find ~/pudl-work/data/

    - name: Upload test coverage report to CodeCov
      uses: codecov/codecov-action@v2.1.0

#   - name: Inform the Codemonkeys
#     uses: 8398a7/action-slack@v3
#     with:
#       status: custom
#       fields: workflow,job,commit,repo,ref,author,took
#       custom_payload: |
#         {
#           username: 'action-slack',
#           icon_emoji: ':octocat:',
#           attachments: [{
#             color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
#             text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
#           }]
#         }
#     env:
#       GITHUB_TOKEN: ${{ github.token }} # required
#       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#       MATRIX_CONTEXT: ${{ toJson(matrix) }} # required
#     if: ${{ always() && github.actor != 'dependabot[bot]' }}

    - name: Inform the Codemonkeys
      id: slack
      uses: slackapi/slack-github-action@v1.18.0
      if: ${{ always() && github.actor != 'dependabot[bot]' }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        GITHUB_TOKEN: ${{ github.token }} # required
        MATRIX_CONTEXT: ${{ toJson(matrix) }} # required
      with:
        # Slack channel id, channel name, or user id to post message.
        # See also: https://api.slack.com/methods/chat.postMessage#channels
        channel-id: 'codemonkeys'
        # For posting a rich message using Block Kit
        payload: |
          {
            "blocks": [
              {
                "type": "section",
                "color": '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                "text": {
                  "type": "mrkdwn",
                  "text": `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
                }
              }
            ]
          }
