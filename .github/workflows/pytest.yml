---
name: pytest

on:
  pull_request:
  merge_group:
    types:
      - checks_requested
  workflow_dispatch:

env:
  PUDL_OUTPUT: /home/runner/pudl-work/output/
  PUDL_INPUT: /home/runner/pudl-work/input/
  DAGSTER_HOME: /home/runner/pudl-work/dagster_home/

jobs:
  change_filter:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      run_code_checks: ${{ github.event_name =='workflow_dispatch' || (steps.filter.outputs.code == 'true' && github.event.merge_group) }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          # this will raise a warning, but it works:  https://github.com/dorny/paths-filter/issues/225
          predicate-quantifier: "every"
          filters: |
            code:
              - '!docs/**.rst'
              - '!docs/**.md'
              - '!docs/**.pdf'
              - '!docs/**.html'
              - '!docs/**.rst.jinja'
              - '!README.rst'
      - name: print components
        run: |
          echo event_name: ${{ github.event_name }}
          echo workflow dispatch: ${{ github.event_name =='workflow_dispatch' }}
          echo code: ${{ steps.filter.outputs.code }}
          echo code is true: ${{ steps.filter.outputs.code == 'true' }}
          echo merge_group: ${{ github.event.merge_group }}

  ci-docs:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: succeed
        run: exit 0

  ci-unit:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: succeed
        run: exit 0

  ci-integration:
    runs-on: ubuntu-latest-8core
    needs: change_filter
    if: ${{ needs.change_filter.outputs.run_code_checks == 'true' }}
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: fail
        run: exit 1

  ci-coverage:
    runs-on: ubuntu-latest
    needs:
      - ci-docs
      - ci-unit
      - ci-integration
      - change_filter
    if: ${{ needs.change_filter.outputs.run_code_checks == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Download coverage
        id: download-coverage
        uses: actions/download-artifact@v4
        with:
          path: coverage
      - name: List downloaded files
        run: |
          find coverage -type f
      - name: Install Micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          init-shell: bash
          environment-name: coverage
          create-args: >-
            python=3.12
            coverage>=7.6.1
      - name: Combine coverage data and output XML report
        run: |
          micromamba run -n coverage coverage combine coverage/*/.coverage
          micromamba run -n coverage coverage xml --fail-under=0
      - name: Upload XML coverage report to CodeCov
        uses: codecov/codecov-action@v5
        with:
          disable_search: true
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true # optional (default = false)
          plugins: noop
          verbose: true
      - name: Display coverage report and ensure it meets required minimum
        # Required coverage is set in pyproject.toml section [tool.coverage.report]
        run: |
          micromamba run -n coverage coverage report
